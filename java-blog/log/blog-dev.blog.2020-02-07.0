2020-02-07 11:49:09.467  INFO 13920 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 13920 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 11:49:09.499 DEBUG 13920 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 11:49:09.500  INFO 13920 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 11:49:09.640  INFO 13920 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 11:49:09.641  INFO 13920 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 11:49:09.641  INFO 13920 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 11:49:11.352  INFO 13920 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 11:49:11.576  INFO 13920 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 205ms. Found 5 JPA repository interfaces.
2020-02-07 11:49:12.333  INFO 13920 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 11:49:13.361  INFO 13920 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 11:49:13.378  INFO 13920 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 11:49:13.379  INFO 13920 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 11:49:13.652  INFO 13920 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 11:49:13.652  INFO 13920 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4009 ms
2020-02-07 11:49:14.189  INFO 13920 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 11:49:14.433  INFO 13920 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 11:49:14.719  INFO 13920 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 11:49:14.950  INFO 13920 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 11:49:15.294  INFO 13920 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 11:49:15.334  INFO 13920 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 11:49:17.546  INFO 13920 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 11:49:17.566  INFO 13920 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 11:49:17.677  INFO 13920 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 11:49:19.329  WARN 13920 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 11:49:19.768  INFO 13920 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 11:49:20.034  INFO 13920 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 11:49:24.949  INFO 13920 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-02-07 11:49:24.956  INFO 13920 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-07 11:49:24.961 ERROR 13920 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2020-02-07 11:49:24.965  INFO 13920 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-07 11:49:24.967  INFO 13920 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 11:49:24.972  INFO 13920 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-02-07 11:49:24.982  INFO 13920 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-02-07 11:49:40.657  INFO 8204 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 8204 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 11:49:40.665 DEBUG 8204 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 11:49:40.665  INFO 8204 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 11:49:40.761  INFO 8204 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 11:49:40.762  INFO 8204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 11:49:40.762  INFO 8204 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 11:49:42.377  INFO 8204 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 11:49:42.510  INFO 8204 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 116ms. Found 5 JPA repository interfaces.
2020-02-07 11:49:42.937  INFO 8204 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 11:49:43.579  INFO 8204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 11:49:43.589  INFO 8204 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 11:49:43.590  INFO 8204 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 11:49:43.737  INFO 8204 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 11:49:43.737  INFO 8204 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2975 ms
2020-02-07 11:49:44.083  INFO 8204 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 11:49:44.184  INFO 8204 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 11:49:44.349  INFO 8204 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 11:49:44.479  INFO 8204 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 11:49:44.641  INFO 8204 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 11:49:44.661  INFO 8204 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 11:49:45.811  INFO 8204 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 11:49:45.825  INFO 8204 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 11:49:45.917  INFO 8204 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 11:49:47.121  WARN 8204 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 11:49:47.427  INFO 8204 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 11:49:47.565  INFO 8204 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 11:49:48.086  INFO 8204 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 11:49:48.089  INFO 8204 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 8.515 seconds (JVM running for 10.529)
2020-02-07 11:51:02.156  INFO 8204 --- [http-nio-8080-exec-4] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 11:51:02.157  INFO 8204 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 11:51:02.193  INFO 8204 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-07 11:51:02.253  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 11:51:02.253  INFO 8204 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 11:51:02.253  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 11:51:02.290  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-07 11:51:02.303  WARN 8204 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 11:51:02.305  WARN 8204 --- [http-nio-8080-exec-5] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 11:51:02.432  INFO 8204 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 11:51:02.460  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 11:51:02.470  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-07 11:51:02.478  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 11:51:08.806  INFO 8204 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 11:51:08.868  INFO 8204 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 11:52:08.835  INFO 8204 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 11:52:08.836  INFO 8204 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 11:52:08.861  INFO 8204 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 11:52:08.875  INFO 8204 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 11:52:08.875  INFO 8204 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 11:52:08.882  INFO 8204 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 11:52:08.882  INFO 8204 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 11:52:08.923  INFO 8204 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:01:56.870  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:01:56.881  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:02:08.375  INFO 8204 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:02:08.386  INFO 8204 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:02:09.105  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:02:09.117  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:02:20.140  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:02:20.148  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:03:30.280  INFO 8204 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:03:30.287  INFO 8204 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:03:30.497  INFO 8204 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:03:30.504  INFO 8204 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:03:30.506  INFO 8204 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:03:30.575  INFO 8204 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:06:36.266  INFO 8204 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:06:36.280  INFO 8204 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:06:36.293  INFO 8204 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:06:36.309  INFO 8204 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:06:36.323  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:06:36.325  INFO 8204 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:06:36.328  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:06:36.332  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:06:36.335  INFO 8204 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:06:36.342  INFO 8204 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:06:46.804  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:06:46.809  INFO 8204 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:06:46.820  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:06:46.825  INFO 8204 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:09:48.151  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 2696 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 12:09:48.234 DEBUG 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 12:09:48.234  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 12:09:48.376  INFO 2696 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 12:09:48.376  INFO 2696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 12:09:48.377  INFO 2696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 12:09:51.857  INFO 2696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 12:09:52.103  INFO 2696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 215ms. Found 5 JPA repository interfaces.
2020-02-07 12:09:53.476  INFO 2696 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 12:09:55.607  INFO 2696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 12:09:55.666  INFO 2696 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 12:09:55.668  INFO 2696 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 12:09:55.979  INFO 2696 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 12:09:55.980  INFO 2696 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 7603 ms
2020-02-07 12:09:57.141  INFO 2696 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 12:09:57.398  INFO 2696 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 12:09:57.804  INFO 2696 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 12:09:58.119  INFO 2696 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 12:09:58.530  INFO 2696 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 12:09:58.588  INFO 2696 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 12:10:03.254  INFO 2696 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 12:10:03.266  INFO 2696 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 12:10:03.611  INFO 2696 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 12:10:09.849  WARN 2696 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 12:10:10.709  INFO 2696 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 12:10:11.051  INFO 2696 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 12:10:13.289  INFO 2696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 12:10:13.294  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 26.844 seconds (JVM running for 31.042)
2020-02-07 12:16:49.035  INFO 2696 --- [http-nio-8080-exec-4] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 12:16:49.035  INFO 2696 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 12:16:49.068  INFO 2696 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed initialization in 31 ms
2020-02-07 12:16:49.139  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:16:49.139  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:16:49.139  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:16:49.149  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:16:49.180  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:16:49.193  WARN 2696 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 12:16:49.194  WARN 2696 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 12:16:49.301  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:16:49.357  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:16:49.421  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:16:49.433  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:16:49.434  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:17:29.863  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=-1, nickname='李浩元', email='123@qq.com', content='dwqdwqfe', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=null}]}
2020-02-07 12:17:29.874 ERROR 2696 --- [http-nio-8080-exec-6] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.service.CommentServiceImpl.saveComment(CommentServiceImpl.java:27)
	at com.lhy.blog.service.CommentServiceImpl$$FastClassBySpringCGLIB$$4a14a6fd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.service.CommentServiceImpl$$EnhancerBySpringCGLIB$$622dd476.saveComment(<generated>)
	at com.lhy.blog.web.CommentController.post(CommentController.java:39)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$23b79367.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 12:17:29.876  WARN 2696 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 12:19:04.588  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:19:04.618  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:19:04.623  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:19:04.624  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:19:04.623  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:19:04.631  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:19:04.637  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:19:04.640  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:19:04.653  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:19:04.664  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:19:07.170  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:19:07.173  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:19:07.193  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:19:07.212  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:19:07.222  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:19:07.222  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:19:07.223  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:19:07.224  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:19:07.230  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:19:07.232  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:19:29.509  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 12:19:29.625  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@2a8b6ccf
2020-02-07 12:19:29.650  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:19:29.657  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:21:31.823  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:21:31.830  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:21:31.839  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:21:31.845  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:22:57.869  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:22:57.875  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:22:57.912  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:22:57.917  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:23:07.967  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='123@qq.com', content='嘿嘿嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 12:23:07.982  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@14306dd7
2020-02-07 12:23:08.023  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:23:08.028  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=134, nickname='李浩元', email='123@qq.com', content='嘿嘿嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 12:23:07.978}, Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:23:13.447  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='123@qq.com', content='的气味的无法', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 12:23:13.463  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@15bb84b7
2020-02-07 12:23:13.500  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:23:13.506  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=135, nickname='李浩元', email='123@qq.com', content='的气味的无法', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:23:13.457}, Comment{id=134, nickname='李浩元', email='123@qq.com', content='嘿嘿嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 12:23:07.978}, Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:23:33.503  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:23:33.507  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:23:33.512  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:23:33.512  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=135, nickname='李浩元', email='123@qq.com', content='的气味的无法', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:23:13.457}, Comment{id=134, nickname='李浩元', email='123@qq.com', content='嘿嘿嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 12:23:07.978}, Comment{id=133, nickname='李浩元', email='123@qq.com', content='哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=2020-02-07 12:19:29.596}]
2020-02-07 12:24:01.352  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 12:24:01.369  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@17a090e2
2020-02-07 12:24:01.421  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:24:01.426  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=136, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:01.365}]
2020-02-07 12:24:13.016  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='123@qq.com', content='嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 12:24:13.032  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@4cf4e676
2020-02-07 12:24:13.072  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:24:13.078  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=137, nickname='李浩元', email='123@qq.com', content='嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:13.027}, Comment{id=136, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:01.365}]
2020-02-07 12:24:20.883  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:24:20.885  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:24:20.898  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:24:20.912  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:24:20.916  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:24:20.919  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:24:20.932  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:24:20.933  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:24:20.943  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:24:20.948  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=137, nickname='李浩元', email='123@qq.com', content='嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:13.027}, Comment{id=136, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:01.365}]
2020-02-07 12:25:09.499  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:25:09.499  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:25:09.503  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=137, nickname='李浩元', email='123@qq.com', content='嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:13.027}, Comment{id=136, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:01.365}]
2020-02-07 12:25:09.503  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:25:43.554  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李白', email='12321@163.com', content='@李浩元：啦啦啦啦', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=null}]}
2020-02-07 12:25:43.572  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@733c599e
2020-02-07 12:25:43.603  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:25:43.607  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=138, nickname='李白', email='12321@163.com', content='@李浩元：啦啦啦啦', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 12:25:43.567}, Comment{id=137, nickname='李浩元', email='123@qq.com', content='嘿嘿', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:13.027}, Comment{id=136, nickname='李浩元', email='123@qq.com', content='哈哈哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 12:24:01.365}]
2020-02-07 12:28:08.605  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 12:28:08.609  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 12:28:08.620  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 12:28:08.633  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 12:28:08.638  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 12:28:08.638  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:28:08.650  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 12:28:08.652  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:28:08.664  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:28:08.667  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:29:13.592  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:29:13.592  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:29:13.594  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:29:13.596  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:30:40.048  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:30:40.056  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:30:40.056  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:30:40.058  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:31:38.240  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:31:38.240  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:31:38.248  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 12:31:38.249  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:31:53.048  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 12:31:53.060  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@614be3a0
2020-02-07 12:31:53.080  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:31:53.087  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 12:32:29.129  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 12:32:29.142  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@cdffa05
2020-02-07 12:32:29.177  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:32:29.183  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 12:33:08.239  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 12:33:08.244  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 12:33:08.249  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 12:33:08.253  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 15:52:57.910  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='3让', email='123@qq.com', content='@3让：ewweer', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 15:52:57.927  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@5191bd01
2020-02-07 15:52:57.958  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 15:52:57.968  INFO 2696 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=141, nickname='3让', email='123@qq.com', content='@3让：ewweer', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 15:52:57.923}, Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 15:55:45.927  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 15:55:45.927  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 15:55:45.931  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 15:55:45.931  INFO 2696 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=141, nickname='3让', email='123@qq.com', content='@3让：ewweer', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 15:52:57.923}, Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 15:55:53.373  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 15:55:53.387  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 15:55:53.388  INFO 2696 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 15:55:53.400  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 15:55:53.411  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 15:55:53.417  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 15:55:53.419  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 15:55:53.425  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 15:55:53.427  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 15:55:53.428  INFO 2696 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 15:56:17.754  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='那里难为人了', email='1@qq.com', content='@3让：123456', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 15:56:17.771  INFO 2696 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@fdeacb6
2020-02-07 15:56:17.805  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 15:56:17.809  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=142, nickname='那里难为人了', email='1@qq.com', content='@3让：123456', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 15:56:17.766}, Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:30:13.726  INFO 9836 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 9836 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 16:30:13.733 DEBUG 9836 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 16:30:13.733  INFO 9836 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 16:30:13.859  INFO 9836 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 16:30:13.867  INFO 9836 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 16:30:13.868  INFO 9836 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 16:30:15.042  INFO 9836 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 16:30:15.175  INFO 9836 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 121ms. Found 5 JPA repository interfaces.
2020-02-07 16:30:15.614  INFO 9836 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 16:30:16.270  INFO 9836 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 16:30:16.282  INFO 9836 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 16:30:16.282  INFO 9836 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 16:30:16.413  INFO 9836 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 16:30:16.413  INFO 9836 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2537 ms
2020-02-07 16:30:16.746  INFO 9836 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 16:30:16.829  INFO 9836 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 16:30:16.989  INFO 9836 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 16:30:17.112  INFO 9836 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 16:30:17.262  INFO 9836 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 16:30:17.281  INFO 9836 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 16:30:18.381  INFO 9836 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 16:30:18.390  INFO 9836 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:30:18.474  INFO 9836 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 16:30:19.183  WARN 9836 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
2020-02-07 16:30:19.184  INFO 9836 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:30:19.189  INFO 9836 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-02-07 16:30:19.204  INFO 9836 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-02-07 16:30:19.206  INFO 9836 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-02-07 16:30:19.222  INFO 9836 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-07 16:30:19.236 ERROR 9836 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.lhy.blog.BlogApplication.main(BlogApplication.java:10)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:96)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:103)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:209)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:78)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lookupQuery(RepositoryFactorySupport.java:574)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$mapMethodsToQuery$1(RepositoryFactorySupport.java:567)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Collections$UnmodifiableCollection$1.forEachRemaining(Collections.java:1049)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.mapMethodsToQuery(RepositoryFactorySupport.java:569)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$new$0(RepositoryFactorySupport.java:559)
	at java.util.Optional.map(Optional.java:215)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:559)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:332)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:297)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:212)
	at org.springframework.data.util.Lazy.get(Lazy.java:94)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:300)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:121)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	... 34 common frames omitted
Caused by: java.lang.IllegalStateException: Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.throwExceptionOnArgumentMismatch(PartTreeJpaQuery.java:161)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.validate(PartTreeJpaQuery.java:147)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:90)
	... 60 common frames omitted

2020-02-07 16:31:01.467  INFO 14828 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 14828 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 16:31:01.472 DEBUG 14828 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 16:31:01.473  INFO 14828 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 16:31:01.585  INFO 14828 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 16:31:01.585  INFO 14828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 16:31:01.586  INFO 14828 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 16:31:02.819  INFO 14828 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 16:31:02.974  INFO 14828 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 139ms. Found 5 JPA repository interfaces.
2020-02-07 16:31:03.423  INFO 14828 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 16:31:04.148  INFO 14828 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 16:31:04.160  INFO 14828 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 16:31:04.161  INFO 14828 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 16:31:04.331  INFO 14828 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 16:31:04.332  INFO 14828 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2746 ms
2020-02-07 16:31:04.688  INFO 14828 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 16:31:04.788  INFO 14828 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 16:31:04.951  INFO 14828 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 16:31:05.090  INFO 14828 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 16:31:05.256  INFO 14828 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 16:31:05.287  INFO 14828 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 16:31:06.515  INFO 14828 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 16:31:06.523  INFO 14828 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:31:06.645  INFO 14828 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 16:31:07.446  WARN 14828 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
2020-02-07 16:31:07.447  INFO 14828 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:31:07.451  INFO 14828 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-02-07 16:31:07.469  INFO 14828 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-02-07 16:31:07.471  INFO 14828 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-02-07 16:31:07.491  INFO 14828 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-07 16:31:07.505 ERROR 14828 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.lhy.blog.BlogApplication.main(BlogApplication.java:10)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1796)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 24 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort)! Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:96)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:103)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:209)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:78)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lookupQuery(RepositoryFactorySupport.java:574)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$mapMethodsToQuery$1(RepositoryFactorySupport.java:567)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Collections$UnmodifiableCollection$1.forEachRemaining(Collections.java:1049)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.mapMethodsToQuery(RepositoryFactorySupport.java:569)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$new$0(RepositoryFactorySupport.java:559)
	at java.util.Optional.map(Optional.java:215)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.<init>(RepositoryFactorySupport.java:559)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:332)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:297)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:212)
	at org.springframework.data.util.Lazy.get(Lazy.java:94)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:300)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:121)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792)
	... 34 common frames omitted
Caused by: java.lang.IllegalStateException: Method public abstract java.util.List com.lhy.blog.dao.CommentRepository.findByBlogIdAndParentCommentNot(java.lang.Long,org.springframework.data.domain.Sort) expects at least 2 arguments but only found 1. This leaves an operator of type NEGATING_SIMPLE_PROPERTY for property parentComment unbound.
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.throwExceptionOnArgumentMismatch(PartTreeJpaQuery.java:161)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.validate(PartTreeJpaQuery.java:147)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:90)
	... 60 common frames omitted

2020-02-07 16:36:29.495  INFO 9136 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 9136 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 16:36:29.499 DEBUG 9136 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 16:36:29.499  INFO 9136 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 16:36:29.612  INFO 9136 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 16:36:29.613  INFO 9136 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 16:36:29.613  INFO 9136 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 16:36:30.686  INFO 9136 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 16:36:30.824  INFO 9136 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 124ms. Found 5 JPA repository interfaces.
2020-02-07 16:36:31.215  INFO 9136 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 16:36:31.804  INFO 9136 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 16:36:31.814  INFO 9136 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 16:36:31.816  INFO 9136 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 16:36:31.952  INFO 9136 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 16:36:31.952  INFO 9136 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2338 ms
2020-02-07 16:36:32.298  INFO 9136 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 16:36:32.371  INFO 9136 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 16:36:32.497  INFO 9136 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 16:36:32.617  INFO 9136 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 16:36:32.763  INFO 9136 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 16:36:32.786  INFO 9136 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 16:36:33.877  INFO 9136 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 16:36:33.885  INFO 9136 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:36:33.985  INFO 9136 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 16:36:34.989  WARN 9136 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 16:36:35.275  INFO 9136 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 16:36:35.412  INFO 9136 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 16:36:36.154  INFO 9136 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 16:36:36.157  INFO 9136 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 7.714 seconds (JVM running for 9.523)
2020-02-07 16:37:54.048  INFO 9136 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 16:37:54.048  INFO 9136 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 16:37:54.067  INFO 9136 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-02-07 16:37:54.127  INFO 9136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:37:54.282  INFO 9136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:37:54.787  INFO 9136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:37:54.882  INFO 9136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:37:55.426  INFO 9136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:37:55.432  INFO 9136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:37:55.446  INFO 9136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:37:55.473  INFO 9136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:38:50.295  INFO 9136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:38:50.298  INFO 9136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:38:50.321  WARN 9136 --- [http-nio-8080-exec-5] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 16:38:50.321  WARN 9136 --- [http-nio-8080-exec-6] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 16:38:50.352  INFO 9136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:38:50.394  INFO 9136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:38:50.418  INFO 9136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:38:50.424  INFO 9136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:38:50.447  INFO 9136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:38:50.450  INFO 9136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:38:50.456  INFO 9136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:38:50.471  INFO 9136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:41:49.673  INFO 15240 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 15240 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 16:41:49.688 DEBUG 15240 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 16:41:49.691  INFO 15240 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 16:41:49.992  INFO 15240 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 16:41:49.995  INFO 15240 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 16:41:49.995  INFO 15240 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 16:41:52.598  INFO 15240 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 16:41:52.802  INFO 15240 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 184ms. Found 5 JPA repository interfaces.
2020-02-07 16:41:54.130  INFO 15240 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 16:41:56.226  INFO 15240 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 16:41:56.249  INFO 15240 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 16:41:56.252  INFO 15240 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 16:41:56.461  INFO 15240 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 16:41:56.462  INFO 15240 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6466 ms
2020-02-07 16:41:57.323  INFO 15240 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 16:41:57.603  INFO 15240 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 16:41:58.026  INFO 15240 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 16:41:58.281  INFO 15240 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 16:41:58.538  INFO 15240 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 16:41:58.570  INFO 15240 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 16:42:00.386  INFO 15240 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 16:42:00.405  INFO 15240 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 16:42:00.560  INFO 15240 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 16:42:02.280  WARN 15240 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 16:42:02.741  INFO 15240 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 16:42:03.073  INFO 15240 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 16:42:06.035  INFO 15240 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 16:42:06.040  INFO 15240 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 17.95 seconds (JVM running for 21.333)
2020-02-07 16:46:17.442  INFO 15240 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 16:46:17.443  INFO 15240 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 16:46:17.473  INFO 15240 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2020-02-07 16:46:17.564  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:46:17.564  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:46:18.001  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:46:18.048  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:47:04.742  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:47:04.744  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:47:04.761  WARN 15240 --- [http-nio-8080-exec-4] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 16:47:04.761  WARN 15240 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 16:47:04.765  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:47:04.802  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:47:04.804  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:47:04.816  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:47:04.825  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:47:04.826  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:47:04.849  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:47:04.852  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:48:01.207  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-07 16:48:01.247  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-07 16:48:06.944  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:48:06.948  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:48:06.949  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:48:06.964  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:48:06.985  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:48:06.992  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 16:48:07.003  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:48:07.035  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 16:48:22.606  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:48:22.612  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:48:22.614  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:48:22.627  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:49:16.185  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:49:16.217  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:49:16.218  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:49:16.219  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:49:16.223  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:49:16.229  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:49:16.236  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:49:16.241  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:49:16.242  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:49:16.253  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:52:00.734  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:52:00.740  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:52:00.743  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:52:00.755  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:52:01.224  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:52:01.232  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:52:01.233  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:52:01.245  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:53:54.396  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:53:54.396  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:53:54.418  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:53:54.430  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:53:54.432  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:53:54.443  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:53:54.445  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:53:54.454  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:53:54.455  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:53:54.471  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:54:50.512  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:54:50.512  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:54:50.517  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:54:50.528  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:58:16.419  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:58:16.429  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:58:16.432  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:58:16.439  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:58:16.453  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:58:16.461  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:58:16.471  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:58:16.480  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:58:16.481  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:58:16.492  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:58:45.340  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='哈哈', email='123@qq.com', content='@那里难为人了：你好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160618_ATMGm.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 16:58:45.414  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@1faae708
2020-02-07 16:58:45.449  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:58:45.464  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:59:04.250  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:59:04.258  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:59:04.261  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:59:04.265  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:59:04.267  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:59:04.284  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:59:04.294  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:59:04.297  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:59:04.302  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:59:04.311  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 16:59:24.036  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 16:59:24.044  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 16:59:24.057  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 16:59:24.073  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 16:59:24.075  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 16:59:24.075  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 16:59:24.077  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 16:59:24.078  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 16:59:24.082  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 16:59:24.089  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 17:01:57.265  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 17:01:57.287  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 17:01:57.306  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 17:01:57.315  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 17:01:57.320  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 17:01:57.318  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 17:01:57.325  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 17:01:57.326  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 17:01:57.331  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 17:01:57.332  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 17:02:37.284  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='efw', email='few@qq.com', content='@哈哈：dwwqdewf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=null}]}
2020-02-07 17:02:37.299  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@2d6b4235
2020-02-07 17:02:37.339  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 17:02:37.356  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 17:02:49.782  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 17:02:49.802  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 17:02:49.819  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 17:02:49.820  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 17:02:49.819  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 17:02:49.821  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 17:02:49.825  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 17:02:49.830  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 17:02:49.838  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 17:02:49.840  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 17:03:53.052  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='frefe', email='123@qq.com', content='@efw：f3w4f43', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 17:03:53.066  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@50494736
2020-02-07 17:03:53.106  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 17:03:53.132  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 17:04:38.432  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 17:04:38.435  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 17:04:38.446  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 17:04:38.454  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 17:04:38.462  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 17:04:38.464  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 17:04:38.472  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 17:04:38.472  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 17:04:38.477  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 17:04:38.485  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 19:07:57.130  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:07:57.132  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:07:57.130  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:07:57.141  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:07:57.146  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:07:57.148  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:07:57.157  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:07:57.160  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:07:57.164  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:07:57.176  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 19:08:25.492  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='CSADFCD', email='123@qq.com', content='@3让：214234', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160645_23nWC.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:08:25.506  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@640ed8d0
2020-02-07 19:08:25.537  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:08:25.549  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 19:08:34.077  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='CSADFCD', email='123@qq.com', content='@3让：frwgtrhe', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160645_23nWC.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:08:34.089  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@5bb88d72
2020-02-07 19:08:34.130  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:08:34.144  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 19:08:55.290  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='abcd', email='123@qq.com', content='@CSADFCD：vsdbvdfbg', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160645_23nWC.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:08:55.302  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@1b3a8624
2020-02-07 19:08:55.345  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:08:55.361  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=140, nickname='3让', email='123@qq.com', content='dewfew', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:32:29.139}, Comment{id=139, nickname='3让', email='123@qq.com', content='の2', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 12:31:53.056}]
2020-02-07 19:10:02.821  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:10:02.826  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:10:02.834  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:10:02.837  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:10:02.842  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:10:02.850  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:10:02.854  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:10:02.858  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:10:02.865  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 19:10:02.866  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:10:34.615  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 19:10:34.630  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@2a80a92c
2020-02-07 19:10:34.656  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:10:34.661  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:10:54.952  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 19:10:54.966  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@8be0018
2020-02-07 19:10:54.986  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:10:54.992  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:11:33.190  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='张三', email='123@qq.com', content='@李四：李四，你好', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 19:11:33.202  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@5757a364
2020-02-07 19:11:33.227  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:11:33.233  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:11:49.415  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李四', email='123@qq.com', content='@张三：你好', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 19:11:49.434  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@27a32a5d
2020-02-07 19:11:49.521  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:11:49.529  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:12:05.432  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='王五', email='123@qq.com', content='@李四：你好', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=null}]}
2020-02-07 19:12:05.442  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@3f1ccf5e
2020-02-07 19:12:05.470  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:12:05.479  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:12:51.710  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:12:51.710  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:12:51.721  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:12:51.726  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:12:51.736  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:12:51.737  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:12:51.737  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:12:51.742  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:12:51.745  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:12:51.750  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:13:38.190  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:13:38.193  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:13:38.202  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:13:38.205  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:13:38.211  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:13:38.216  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:13:38.220  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:13:38.221  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:13:38.224  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:13:38.231  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:13:58.431  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='@李四：份未发', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:13:58.442  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@20be727d
2020-02-07 19:13:58.471  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:13:58.480  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:16:27.667  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:16:27.682  INFO 15240 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@3420f2d0
2020-02-07 19:16:27.727  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:16:27.740  INFO 15240 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=155, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:27.677}, Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:16:32.833  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='dweferf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:16:32.848  INFO 15240 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@602350ad
2020-02-07 19:16:32.910  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:16:32.922  INFO 15240 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=156, nickname='wasd', email='123@qq.com', content='dweferf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:32.845}, Comment{id=155, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:27.677}, Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:16:53.370  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='vdsvdsv', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:16:53.390  INFO 15240 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@6e9a49a8
2020-02-07 19:16:53.444  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:16:53.462  INFO 15240 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=156, nickname='wasd', email='123@qq.com', content='dweferf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:32.845}, Comment{id=155, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:27.677}, Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:17:00.215  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='@wasd：gergtrht', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:17:00.227  INFO 15240 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@6b9cb6b2
2020-02-07 19:17:00.269  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:17:00.289  INFO 15240 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=156, nickname='wasd', email='123@qq.com', content='dweferf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:32.845}, Comment{id=155, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:27.677}, Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:17:07.835  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='wasd', email='123@qq.com', content='@wasd：csgfrdgbd', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 19:17:07.850  INFO 15240 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@7c58a7f
2020-02-07 19:17:07.894  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:17:07.917  INFO 15240 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=156, nickname='wasd', email='123@qq.com', content='dweferf', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:32.845}, Comment{id=155, nickname='wasd', email='123@qq.com', content='fewfregr', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=2020-02-07 19:16:27.677}, Comment{id=150, nickname='李四', email='123@qq.com', content='大家好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:54.962}, Comment{id=149, nickname='张三', email='123@qq.com', content='大家好!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160820_JuXzL.jpeg', createTime=2020-02-07 19:10:34.626}]
2020-02-07 19:18:59.415  INFO 4448 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 4448 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 19:18:59.427 DEBUG 4448 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 19:18:59.427  INFO 4448 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 19:18:59.547  INFO 4448 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 19:18:59.548  INFO 4448 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 19:18:59.549  INFO 4448 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 19:19:01.828  INFO 4448 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 19:19:02.064  INFO 4448 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 203ms. Found 5 JPA repository interfaces.
2020-02-07 19:19:03.021  INFO 4448 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 19:19:04.522  INFO 4448 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 19:19:04.545  INFO 4448 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 19:19:04.546  INFO 4448 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 19:19:04.897  INFO 4448 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 19:19:04.898  INFO 4448 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5348 ms
2020-02-07 19:19:05.812  INFO 4448 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 19:19:06.013  INFO 4448 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 19:19:06.329  INFO 4448 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 19:19:06.672  INFO 4448 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 19:19:07.060  INFO 4448 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 19:19:07.095  INFO 4448 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 19:19:10.754  INFO 4448 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 19:19:10.777  INFO 4448 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 19:19:10.955  INFO 4448 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 19:19:12.946  WARN 4448 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 19:19:13.481  INFO 4448 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 19:19:13.712  INFO 4448 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 19:19:15.005  INFO 4448 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 19:19:15.009  INFO 4448 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 17.054 seconds (JVM running for 22.172)
2020-02-07 19:19:23.749  INFO 4448 --- [http-nio-8080-exec-4] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 19:19:23.749  INFO 4448 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 19:19:23.775  INFO 4448 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms
2020-02-07 19:19:23.840  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:19:23.841  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:19:23.840  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:19:23.845  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:19:23.846  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:19:23.886  WARN 4448 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:19:23.888  WARN 4448 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:19:23.996  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : []
2020-02-07 19:19:24.034  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:19:24.059  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:19:24.084  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:19:24.133  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:19:51.338  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=null}]}
2020-02-07 19:19:51.423  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@6a52bd2d
2020-02-07 19:19:51.458  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:19:51.468  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:26:54.235  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:26:54.235  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:26:54.242  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:26:54.244  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:26:54.482  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:26:54.490  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:26:54.522  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:26:54.531  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:28:28.012  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:28:28.018  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:28:28.021  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:28:28.035  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:28:28.039  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:28:28.059  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:28:28.083  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:28:28.085  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:28:28.091  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:28:28.097  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:29:00.498  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李四', email='123@qq.com', content='嘿嘿嘿！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:29:00.519  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@787969d9
2020-02-07 19:29:00.558  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:29:00.570  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:29:51.771  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='王五', email='123@qq.com', content='呵呵呵!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:29:51.791  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@586dcedd
2020-02-07 19:29:51.831  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:29:51.850  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:30:13.484  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='赵六', email='123@qq.com', content='啦啦啦!', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:30:13.498  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@fbb8a13
2020-02-07 19:30:13.527  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:30:13.545  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:30:46.296  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:30:46.297  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:30:46.314  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:30:46.322  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:30:46.322  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:30:46.323  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:30:46.331  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:30:46.340  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:30:46.341  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:30:46.356  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:31:19.861  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='赵六', email='123122@qq.com', content='呵呵呵', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 19:31:19.876  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@489ff62
2020-02-07 19:31:19.911  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:31:19.929  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:31:46.146  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='王二', email='123122@qq.com', content='啦啦啦啦', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 19:31:46.165  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@31272030
2020-02-07 19:31:46.187  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:31:46.203  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:32:13.626  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:32:13.628  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:32:13.633  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:32:13.641  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:32:13.646  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:32:13.656  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:32:13.670  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:32:13.670  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:32:13.681  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:32:13.707  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:35:26.008  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:35:26.008  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:35:26.023  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:35:26.029  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:35:26.043  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:35:26.047  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:35:26.052  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:35:26.057  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:35:26.061  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:35:26.076  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:35:39.823  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:35:39.845  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:35:39.859  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:35:39.860  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:35:39.862  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:35:39.867  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:35:39.872  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:35:39.880  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:35:39.885  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:35:39.893  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:36:00.807  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='赵六', email='123@qq.com', content='啦啦啦', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 19:36:00.825  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@45c252f6
2020-02-07 19:36:00.855  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:36:00.864  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:36:18.154  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='王五', email='123@qq.com', content='呵呵呵', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 19:36:18.173  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@742b1987
2020-02-07 19:36:18.205  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:36:18.215  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:36:42.293  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:36:42.315  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:36:42.319  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:36:42.320  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:36:42.321  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:36:42.324  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:36:42.319  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:36:42.326  INFO 4448 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:36:42.332  INFO 4448 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:36:42.349  INFO 4448 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:37:04.011  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='赵六', email='123@qq.com', content='呵呵呵', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160711_uU3Zy.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 19:37:04.026  INFO 4448 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@7521933f
2020-02-07 19:37:04.057  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:37:04.066  INFO 4448 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:41:21.365  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:41:21.378  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:41:21.384  INFO 4448 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:41:21.390  INFO 4448 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:41:21.394  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:41:21.404  INFO 4448 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:41:21.409  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:41:21.409  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:41:21.419  INFO 4448 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:41:21.428  INFO 4448 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:51:31.307  INFO 10528 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 10528 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 19:51:31.312 DEBUG 10528 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 19:51:31.313  INFO 10528 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 19:51:31.525  INFO 10528 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 19:51:31.525  INFO 10528 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 19:51:31.526  INFO 10528 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 19:51:33.387  INFO 10528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 19:51:33.597  INFO 10528 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 191ms. Found 5 JPA repository interfaces.
2020-02-07 19:51:34.275  INFO 10528 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 19:51:35.275  INFO 10528 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 19:51:35.294  INFO 10528 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 19:51:35.294  INFO 10528 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 19:51:35.466  INFO 10528 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 19:51:35.466  INFO 10528 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3940 ms
2020-02-07 19:51:35.997  INFO 10528 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 19:51:36.131  INFO 10528 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 19:51:36.341  INFO 10528 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 19:51:36.545  INFO 10528 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 19:51:36.806  INFO 10528 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 19:51:36.833  INFO 10528 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 19:51:38.697  INFO 10528 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 19:51:38.709  INFO 10528 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 19:51:38.850  INFO 10528 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 19:51:40.771  WARN 10528 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 19:51:41.280  INFO 10528 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 19:51:41.512  INFO 10528 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 19:51:42.746  INFO 10528 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 19:51:42.751  INFO 10528 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.755 seconds (JVM running for 15.468)
2020-02-07 19:51:48.905  INFO 10528 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 19:51:48.906  INFO 10528 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 19:51:48.931  INFO 10528 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms
2020-02-07 19:51:48.997  INFO 10528 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:51:48.997  INFO 10528 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:51:48.997  INFO 10528 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:51:48.999  INFO 10528 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:51:49.000  INFO 10528 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:51:49.058  WARN 10528 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:51:49.063  WARN 10528 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:51:49.183  INFO 10528 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:51:49.184  INFO 10528 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:51:49.208 ERROR 10528 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.service.CommentServiceImpl.recursively(CommentServiceImpl.java:69)
	at com.lhy.blog.service.CommentServiceImpl.combineChildren(CommentServiceImpl.java:56)
	at com.lhy.blog.service.CommentServiceImpl.eachComment(CommentServiceImpl.java:47)
	at com.lhy.blog.service.CommentServiceImpl.listCommentByBlogId(CommentServiceImpl.java:24)
	at com.lhy.blog.service.CommentServiceImpl$$FastClassBySpringCGLIB$$4a14a6fd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.lhy.blog.service.CommentServiceImpl$$EnhancerBySpringCGLIB$$ed537066.listCommentByBlogId(<generated>)
	at com.lhy.blog.web.CommentController.comments(CommentController.java:26)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$740a46f9.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 19:51:49.219  WARN 10528 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 19:51:49.241  INFO 10528 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:51:49.247  INFO 10528 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:53:32.240  INFO 5096 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 5096 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 19:53:32.243 DEBUG 5096 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 19:53:32.244  INFO 5096 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 19:53:32.366  INFO 5096 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 19:53:32.367  INFO 5096 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 19:53:32.367  INFO 5096 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 19:53:33.790  INFO 5096 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 19:53:33.982  INFO 5096 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 169ms. Found 5 JPA repository interfaces.
2020-02-07 19:53:34.545  INFO 5096 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 19:53:35.365  INFO 5096 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 19:53:35.384  INFO 5096 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 19:53:35.384  INFO 5096 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 19:53:35.563  INFO 5096 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 19:53:35.564  INFO 5096 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3197 ms
2020-02-07 19:53:35.995  INFO 5096 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 19:53:36.111  INFO 5096 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 19:53:36.314  INFO 5096 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 19:53:36.488  INFO 5096 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 19:53:36.709  INFO 5096 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 19:53:36.745  INFO 5096 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 19:53:38.183  INFO 5096 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 19:53:38.193  INFO 5096 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 19:53:38.353  INFO 5096 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 19:53:39.804  WARN 5096 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 19:53:40.198  INFO 5096 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 19:53:40.381  INFO 5096 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 19:53:41.320  INFO 5096 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 19:53:41.326  INFO 5096 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 10.318 seconds (JVM running for 12.304)
2020-02-07 19:53:55.842  INFO 5096 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 19:53:55.843  INFO 5096 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 19:53:55.870  INFO 5096 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 27 ms
2020-02-07 19:53:55.943  INFO 5096 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 19:53:55.943  INFO 5096 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 19:53:55.943  INFO 5096 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 19:53:55.949  INFO 5096 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 19:53:55.949  INFO 5096 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 19:53:55.977  WARN 5096 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:53:55.980  WARN 5096 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 19:53:56.107  INFO 5096 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 19:53:56.144  INFO 5096 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 19:53:56.173  INFO 5096 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 19:53:56.183  INFO 5096 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 19:53:56.188  INFO 5096 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 19:53:56.769 ERROR 5096 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
Caused by: java.lang.StackOverflowError: null
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:740)
	... 1011 common frames omitted

2020-02-07 19:53:56.786  WARN 5096 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])]
2020-02-07 19:53:57.092 ERROR 5096 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 19:53:57.199 ERROR 5096 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1429)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:921)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	... 55 common frames omitted

2020-02-07 19:53:57.200  WARN 5096 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。]
2020-02-07 19:53:57.202 ERROR 5096 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 19:53:57.203 ERROR 5096 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error]

org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted

2020-02-07 20:01:01.766  INFO 4904 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 4904 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:01:01.776 DEBUG 4904 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:01:01.777  INFO 4904 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:01:01.991  INFO 4904 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:01:01.992  INFO 4904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:01:01.993  INFO 4904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:01:05.049  INFO 4904 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:01:05.391  INFO 4904 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 320ms. Found 5 JPA repository interfaces.
2020-02-07 20:01:06.723  INFO 4904 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:01:08.738  INFO 4904 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:01:08.765  INFO 4904 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:01:08.766  INFO 4904 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:01:09.157  INFO 4904 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:01:09.159  INFO 4904 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 7166 ms
2020-02-07 20:01:10.161  INFO 4904 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:01:10.425  INFO 4904 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:01:10.871  INFO 4904 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:01:11.283  INFO 4904 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:01:11.790  INFO 4904 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:01:11.863  INFO 4904 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:01:15.841  INFO 4904 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:01:15.869  INFO 4904 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:01:16.279  INFO 4904 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:01:19.757  WARN 4904 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:01:20.757  INFO 4904 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:01:21.302  INFO 4904 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:01:23.852  INFO 4904 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:01:23.871  INFO 4904 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 23.622 seconds (JVM running for 27.528)
2020-02-07 20:02:19.995  INFO 4904 --- [http-nio-8080-exec-9] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:02:20.001  INFO 4904 --- [http-nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:02:20.062  INFO 4904 --- [http-nio-8080-exec-9] o.s.web.servlet.DispatcherServlet        : Completed initialization in 60 ms
2020-02-07 20:02:20.193  INFO 4904 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:02:20.193  INFO 4904 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:02:20.193  INFO 4904 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:02:20.193  INFO 4904 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:02:20.193  INFO 4904 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:02:20.240  WARN 4904 --- [http-nio-8080-exec-9] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:02:20.241  WARN 4904 --- [http-nio-8080-exec-8] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:02:20.406  INFO 4904 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:02:20.430  INFO 4904 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:02:20.443  INFO 4904 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:02:20.447  INFO 4904 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:02:20.457  INFO 4904 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:02:21.174 ERROR 4904 --- [http-nio-8080-exec-7] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
Caused by: java.lang.StackOverflowError: null
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:740)
	... 1011 common frames omitted

2020-02-07 20:02:21.203  WARN 4904 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])]
2020-02-07 20:02:21.609 ERROR 4904 --- [http-nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:02:21.658 ERROR 4904 --- [http-nio-8080-exec-7] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1429)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:921)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	... 55 common frames omitted

2020-02-07 20:02:21.659  WARN 4904 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。]
2020-02-07 20:02:21.664 ERROR 4904 --- [http-nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:02:21.668 ERROR 4904 --- [http-nio-8080-exec-7] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error]

org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted

2020-02-07 20:03:21.569  INFO 4904 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:03:21.589  INFO 4904 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:03:21.604  INFO 4904 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:03:21.609  INFO 4904 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:03:21.611  INFO 4904 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:03:21.611  INFO 4904 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:03:21.629  INFO 4904 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:03:21.624  INFO 4904 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:03:21.645  INFO 4904 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:03:21.693  INFO 4904 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:03:21.871 ERROR 4904 --- [http-nio-8080-exec-2] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
Caused by: java.lang.StackOverflowError: null
	at java.nio.channels.spi.AbstractSelectableChannel.keyFor(AbstractSelectableChannel.java:162)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:85)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	... 2 common frames omitted

2020-02-07 20:03:21.994  WARN 4904 --- [http-nio-8080-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])]
2020-02-07 20:03:22.006 ERROR 4904 --- [http-nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:06:48.791  INFO 3664 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 3664 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:06:48.796 DEBUG 3664 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:06:48.797  INFO 3664 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:06:48.937  INFO 3664 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:06:48.938  INFO 3664 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:06:48.939  INFO 3664 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:06:51.151  INFO 3664 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:06:51.332  INFO 3664 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 162ms. Found 5 JPA repository interfaces.
2020-02-07 20:06:52.064  INFO 3664 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:06:53.238  INFO 3664 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:06:53.257  INFO 3664 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:06:53.258  INFO 3664 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:06:53.472  INFO 3664 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:06:53.473  INFO 3664 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4533 ms
2020-02-07 20:06:54.091  INFO 3664 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:06:54.240  INFO 3664 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:06:54.523  INFO 3664 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:06:54.736  INFO 3664 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:06:54.969  INFO 3664 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:06:55.018  INFO 3664 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:06:56.978  INFO 3664 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:06:56.990  INFO 3664 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:06:57.114  INFO 3664 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:06:58.830  WARN 3664 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:06:59.380  INFO 3664 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:06:59.625  INFO 3664 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:07:00.867  INFO 3664 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:07:00.873  INFO 3664 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 13.523 seconds (JVM running for 16.293)
2020-02-07 20:09:09.042  INFO 3664 --- [http-nio-8080-exec-6] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:09:09.043  INFO 3664 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:09:09.067  INFO 3664 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2020-02-07 20:09:09.138  INFO 3664 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:09:09.141  INFO 3664 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:09:09.142  INFO 3664 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:09:09.143  INFO 3664 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:09:09.144  INFO 3664 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:09:09.242  WARN 3664 --- [http-nio-8080-exec-8] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:09:09.243  WARN 3664 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:09:09.384  INFO 3664 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:09:09.408  INFO 3664 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:09:09.428 ERROR 3664 --- [http-nio-8080-exec-6] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.service.CommentServiceImpl.recursively(CommentServiceImpl.java:66)
	at com.lhy.blog.service.CommentServiceImpl.combineChildren(CommentServiceImpl.java:55)
	at com.lhy.blog.service.CommentServiceImpl.eachComment(CommentServiceImpl.java:47)
	at com.lhy.blog.service.CommentServiceImpl.listCommentByBlogId(CommentServiceImpl.java:24)
	at com.lhy.blog.service.CommentServiceImpl$$FastClassBySpringCGLIB$$4a14a6fd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.lhy.blog.service.CommentServiceImpl$$EnhancerBySpringCGLIB$$cc33497a.listCommentByBlogId(<generated>)
	at com.lhy.blog.web.CommentController.comments(CommentController.java:34)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$71116ae5.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:09:09.438  WARN 3664 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:09:09.448  INFO 3664 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:09:09.472  INFO 3664 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:11:56.629  INFO 3664 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:11:56.632  INFO 3664 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:11:56.633  INFO 3664 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:11:56.637  INFO 3664 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:11:56.642  INFO 3664 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:11:56.659  INFO 3664 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:11:56.670  INFO 3664 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:11:56.676  INFO 3664 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:11:56.679  INFO 3664 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:11:56.699 ERROR 3664 --- [http-nio-8080-exec-10] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.service.CommentServiceImpl.recursively(CommentServiceImpl.java:66)
	at com.lhy.blog.service.CommentServiceImpl.combineChildren(CommentServiceImpl.java:55)
	at com.lhy.blog.service.CommentServiceImpl.eachComment(CommentServiceImpl.java:47)
	at com.lhy.blog.service.CommentServiceImpl.listCommentByBlogId(CommentServiceImpl.java:24)
	at com.lhy.blog.service.CommentServiceImpl$$FastClassBySpringCGLIB$$4a14a6fd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.lhy.blog.service.CommentServiceImpl$$EnhancerBySpringCGLIB$$cc33497a.listCommentByBlogId(<generated>)
	at com.lhy.blog.web.CommentController.comments(CommentController.java:34)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$71116ae5.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:11:56.700  WARN 3664 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:14:05.814  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 2696 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:14:05.888 DEBUG 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:14:05.888  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:14:06.033  INFO 2696 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:14:06.035  INFO 2696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:14:06.035  INFO 2696 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:14:07.681  INFO 2696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:14:07.887  INFO 2696 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 186ms. Found 5 JPA repository interfaces.
2020-02-07 20:14:08.473  INFO 2696 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:14:09.408  INFO 2696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:14:09.430  INFO 2696 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:14:09.432  INFO 2696 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:14:09.624  INFO 2696 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:14:09.625  INFO 2696 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3589 ms
2020-02-07 20:14:10.043  INFO 2696 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:14:10.147  INFO 2696 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:14:10.335  INFO 2696 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:14:10.496  INFO 2696 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:14:10.712  INFO 2696 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:14:10.743  INFO 2696 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:14:12.219  INFO 2696 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:14:12.235  INFO 2696 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:14:12.357  INFO 2696 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:14:13.749  WARN 2696 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:14:14.163  INFO 2696 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:14:14.343  INFO 2696 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:14:15.313  INFO 2696 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:14:15.316  INFO 2696 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 10.695 seconds (JVM running for 12.892)
2020-02-07 20:14:22.609  INFO 2696 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:14:22.609  INFO 2696 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:14:22.654  INFO 2696 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 44 ms
2020-02-07 20:14:22.722  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:14:22.722  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:14:22.722  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:14:22.730  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:14:22.731  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:14:22.756  WARN 2696 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:14:22.771  WARN 2696 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:14:22.935  INFO 2696 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:14:22.942  INFO 2696 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:14:22.988  INFO 2696 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:14:22.998  INFO 2696 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:14:22.998  INFO 2696 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:14:23.499 ERROR 2696 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
Caused by: java.lang.StackOverflowError: null
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:740)
	... 1011 common frames omitted

2020-02-07 20:14:23.517  WARN 2696 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])]
2020-02-07 20:14:24.004 ERROR 2696 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:14:24.060 ERROR 2696 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1429)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:921)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	... 55 common frames omitted

2020-02-07 20:14:24.061  WARN 2696 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。]
2020-02-07 20:14:24.068 ERROR 2696 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:14:24.069 ERROR 2696 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error]

org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted

2020-02-07 20:19:19.639  INFO 15380 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 15380 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:19:19.645 DEBUG 15380 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:19:19.646  INFO 15380 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:19:19.948  INFO 15380 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:19:19.950  INFO 15380 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:19:19.952  INFO 15380 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:19:22.374  INFO 15380 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:19:22.530  INFO 15380 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 144ms. Found 5 JPA repository interfaces.
2020-02-07 20:19:23.162  INFO 15380 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:19:24.152  INFO 15380 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:19:24.178  INFO 15380 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:19:24.179  INFO 15380 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:19:24.401  INFO 15380 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:19:24.401  INFO 15380 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4449 ms
2020-02-07 20:19:24.858  INFO 15380 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:19:24.983  INFO 15380 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:19:25.279  INFO 15380 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:19:25.525  INFO 15380 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:19:25.747  INFO 15380 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:19:25.783  INFO 15380 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:19:27.496  INFO 15380 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:19:27.511  INFO 15380 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:19:27.713  INFO 15380 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:19:29.596  WARN 15380 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:19:30.085  INFO 15380 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:19:30.344  INFO 15380 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:19:31.643  INFO 15380 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:19:31.650  INFO 15380 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 13.613 seconds (JVM running for 16.678)
2020-02-07 20:21:20.921  INFO 15380 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:21:20.921  INFO 15380 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:21:20.980  INFO 15380 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 58 ms
2020-02-07 20:21:21.080  INFO 15380 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:21:21.082  INFO 15380 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:21:21.084  INFO 15380 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:21:21.086  INFO 15380 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 20:21:21.139  WARN 15380 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:21:21.140  WARN 15380 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:21:21.346  INFO 15380 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:21:21.356  INFO 15380 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:21:21.378  INFO 15380 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:21:21.394  INFO 15380 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 20:21:27.191  INFO 15380 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:21:27.226  INFO 15380 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:21:27.465  INFO 15380 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:21:27.548  INFO 15380 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:24:22.125  INFO 6868 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 6868 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:24:22.131 DEBUG 6868 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:24:22.132  INFO 6868 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:24:22.329  INFO 6868 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:24:22.330  INFO 6868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:24:22.331  INFO 6868 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:24:25.079  INFO 6868 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:24:25.282  INFO 6868 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 179ms. Found 5 JPA repository interfaces.
2020-02-07 20:24:26.041  INFO 6868 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:24:27.162  INFO 6868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:24:27.188  INFO 6868 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:24:27.190  INFO 6868 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:24:27.401  INFO 6868 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:24:27.402  INFO 6868 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5069 ms
2020-02-07 20:24:28.143  INFO 6868 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:24:28.362  INFO 6868 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:24:28.708  INFO 6868 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:24:28.935  INFO 6868 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:24:29.231  INFO 6868 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:24:29.269  INFO 6868 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:24:31.309  INFO 6868 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:24:31.325  INFO 6868 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:24:31.493  INFO 6868 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:24:33.325  WARN 6868 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:24:33.828  INFO 6868 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:24:34.103  INFO 6868 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:24:35.258  INFO 6868 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:24:35.261  INFO 6868 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 14.712 seconds (JVM running for 17.605)
2020-02-07 20:25:02.309  INFO 6868 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:25:02.310  INFO 6868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:25:02.338  INFO 6868 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms
2020-02-07 20:25:02.399  INFO 6868 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:25:02.399  INFO 6868 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:25:02.400  INFO 6868 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:25:02.449  WARN 6868 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:25:02.454  WARN 6868 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:25:02.519  INFO 6868 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:25:02.523  INFO 6868 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:25:02.621  INFO 6868 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:25:02.640  INFO 6868 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:25:02.670  INFO 6868 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:25:02.691  INFO 6868 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:25:02.742  INFO 6868 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:32:30.284  INFO 15768 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 15768 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:32:30.289 DEBUG 15768 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:32:30.291  INFO 15768 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:32:30.414  INFO 15768 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:32:30.419  INFO 15768 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:32:30.420  INFO 15768 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:32:32.289  INFO 15768 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:32:32.503  INFO 15768 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 185ms. Found 5 JPA repository interfaces.
2020-02-07 20:32:33.234  INFO 15768 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:32:34.188  INFO 15768 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:32:34.204  INFO 15768 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:32:34.204  INFO 15768 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:32:34.411  INFO 15768 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:32:34.411  INFO 15768 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3989 ms
2020-02-07 20:32:34.909  INFO 15768 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:32:35.048  INFO 15768 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:32:35.327  INFO 15768 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:32:35.549  INFO 15768 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:32:35.763  INFO 15768 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:32:35.806  INFO 15768 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:32:37.445  INFO 15768 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:32:37.462  INFO 15768 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:32:37.639  INFO 15768 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:32:39.421  WARN 15768 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:32:39.935  INFO 15768 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:32:40.183  INFO 15768 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:32:41.330  INFO 15768 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:32:41.334  INFO 15768 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.493 seconds (JVM running for 14.922)
2020-02-07 20:32:46.678  INFO 15768 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:32:46.679  INFO 15768 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:32:46.722  INFO 15768 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 43 ms
2020-02-07 20:32:46.800  INFO 15768 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:32:46.800  INFO 15768 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:32:46.803  INFO 15768 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:32:46.829  WARN 15768 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:32:46.829  WARN 15768 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:32:46.842  INFO 15768 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:32:46.871  INFO 15768 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:32:46.978  INFO 15768 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:32:46.978  INFO 15768 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:32:46.998  INFO 15768 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:32:47.048  INFO 15768 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:32:47.062  INFO 15768 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:35:05.181  INFO 16524 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 16524 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:35:05.189 DEBUG 16524 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:35:05.190  INFO 16524 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:35:05.339  INFO 16524 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:35:05.341  INFO 16524 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:35:05.342  INFO 16524 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:35:07.238  INFO 16524 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:35:07.451  INFO 16524 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 181ms. Found 5 JPA repository interfaces.
2020-02-07 20:35:08.324  INFO 16524 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:35:09.382  INFO 16524 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:35:09.394  INFO 16524 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:35:09.397  INFO 16524 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:35:09.592  INFO 16524 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:35:09.593  INFO 16524 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4251 ms
2020-02-07 20:35:10.126  INFO 16524 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:35:10.252  INFO 16524 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:35:10.472  INFO 16524 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:35:10.658  INFO 16524 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:35:10.915  INFO 16524 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:35:10.951  INFO 16524 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:35:12.637  INFO 16524 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:35:12.649  INFO 16524 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:35:12.781  INFO 16524 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:35:14.400  WARN 16524 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:35:14.874  INFO 16524 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:35:15.095  INFO 16524 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:35:16.127  INFO 16524 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:35:16.130  INFO 16524 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.394 seconds (JVM running for 14.934)
2020-02-07 20:36:01.079  INFO 16524 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:36:01.081  INFO 16524 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:36:01.121  INFO 16524 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 39 ms
2020-02-07 20:36:01.182  INFO 16524 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:36:01.182  INFO 16524 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:36:01.182  INFO 16524 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:36:01.236  WARN 16524 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:36:01.236  WARN 16524 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:36:01.290  INFO 16524 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:36:01.291  INFO 16524 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:36:01.437  INFO 16524 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:36:01.442  INFO 16524 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:36:01.459  INFO 16524 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:36:01.475  INFO 16524 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:36:01.497 ERROR 16524 --- [http-nio-8080-exec-6] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.web.CommentController.comments(CommentController.java:28)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$5e2288e8.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:36:01.504  WARN 16524 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:37:23.250  INFO 5032 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 5032 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:37:23.272 DEBUG 5032 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:37:23.273  INFO 5032 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:37:23.466  INFO 5032 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:37:23.467  INFO 5032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:37:23.468  INFO 5032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:37:25.152  INFO 5032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:37:25.503  INFO 5032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 329ms. Found 5 JPA repository interfaces.
2020-02-07 20:37:26.185  INFO 5032 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:37:27.129  INFO 5032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:37:27.142  INFO 5032 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:37:27.143  INFO 5032 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:37:27.316  INFO 5032 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:37:27.316  INFO 5032 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3847 ms
2020-02-07 20:37:27.795  INFO 5032 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:37:27.920  INFO 5032 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:37:28.143  INFO 5032 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:37:28.348  INFO 5032 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:37:28.548  INFO 5032 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:37:28.574  INFO 5032 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:37:30.150  INFO 5032 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:37:30.168  INFO 5032 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:37:30.298  INFO 5032 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:37:31.914  WARN 5032 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:37:32.402  INFO 5032 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:37:32.625  INFO 5032 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:37:33.723  INFO 5032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:37:33.726  INFO 5032 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.017 seconds (JVM running for 14.947)
2020-02-07 20:37:42.084  INFO 5032 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:37:42.084  INFO 5032 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:37:42.120  INFO 5032 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-07 20:37:42.191  INFO 5032 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:37:42.192  INFO 5032 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:37:42.192  INFO 5032 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:37:42.237  WARN 5032 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:37:42.237  WARN 5032 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:37:42.263  INFO 5032 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:37:42.264  INFO 5032 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:37:42.350  INFO 5032 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:37:42.364  INFO 5032 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:37:42.412  INFO 5032 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:37:42.412  INFO 5032 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:37:42.437  INFO 5032 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:40:06.723  INFO 12004 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 12004 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:40:06.728 DEBUG 12004 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:40:06.728  INFO 12004 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:40:07.009  INFO 12004 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:40:07.011  INFO 12004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:40:07.012  INFO 12004 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:40:08.775  INFO 12004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:40:09.022  INFO 12004 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 228ms. Found 5 JPA repository interfaces.
2020-02-07 20:40:09.720  INFO 12004 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:40:10.725  INFO 12004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:40:10.746  INFO 12004 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:40:10.747  INFO 12004 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:40:10.964  INFO 12004 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:40:10.968  INFO 12004 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3954 ms
2020-02-07 20:40:11.472  INFO 12004 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:40:11.618  INFO 12004 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:40:11.837  INFO 12004 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:40:12.027  INFO 12004 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:40:12.267  INFO 12004 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:40:12.302  INFO 12004 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:40:13.976  INFO 12004 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:40:13.997  INFO 12004 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:40:14.135  INFO 12004 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:40:15.690  WARN 12004 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:40:16.187  INFO 12004 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:40:16.482  INFO 12004 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:40:17.555  INFO 12004 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:40:17.561  INFO 12004 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.026 seconds (JVM running for 14.469)
2020-02-07 20:40:24.911  INFO 12004 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:40:24.911  INFO 12004 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:40:24.951  INFO 12004 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 39 ms
2020-02-07 20:40:25.021  INFO 12004 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:40:25.030  INFO 12004 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:40:25.031  INFO 12004 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:40:25.067  WARN 12004 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:40:25.067  WARN 12004 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:40:25.113  INFO 12004 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:40:25.117  INFO 12004 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:40:25.286  INFO 12004 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:40:25.298  INFO 12004 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:40:25.303  INFO 12004 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:40:25.325  INFO 12004 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:40:25.381 ERROR 12004 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.web.CommentController.comments(CommentController.java:38)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$bc034c54.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:40:25.385  WARN 12004 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:41:15.863  INFO 16600 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 16600 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:41:15.868 DEBUG 16600 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:41:15.869  INFO 16600 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:41:16.038  INFO 16600 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:41:16.039  INFO 16600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:41:16.039  INFO 16600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:41:17.433  INFO 16600 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:41:17.610  INFO 16600 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 163ms. Found 5 JPA repository interfaces.
2020-02-07 20:41:18.171  INFO 16600 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:41:19.031  INFO 16600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:41:19.047  INFO 16600 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:41:19.048  INFO 16600 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:41:19.246  INFO 16600 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:41:19.247  INFO 16600 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3208 ms
2020-02-07 20:41:19.658  INFO 16600 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:41:19.765  INFO 16600 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:41:19.996  INFO 16600 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:41:20.152  INFO 16600 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:41:20.351  INFO 16600 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:41:20.380  INFO 16600 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:41:21.846  INFO 16600 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:41:21.855  INFO 16600 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:41:21.992  INFO 16600 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:41:23.460  WARN 16600 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:41:23.872  INFO 16600 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:41:24.068  INFO 16600 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:41:25.006  INFO 16600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:41:25.012  INFO 16600 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 10.294 seconds (JVM running for 12.295)
2020-02-07 20:42:02.377  INFO 16600 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:42:02.378  INFO 16600 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:42:02.413  INFO 16600 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 34 ms
2020-02-07 20:42:02.483  INFO 16600 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:42:02.485  INFO 16600 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:42:02.484  INFO 16600 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:42:02.521  WARN 16600 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:42:02.521  WARN 16600 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:42:02.565  INFO 16600 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:42:02.568  INFO 16600 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:42:02.734  INFO 16600 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:42:02.741  INFO 16600 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:42:02.768  INFO 16600 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:42:02.801  INFO 16600 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:42:02.807  INFO 16600 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:46:08.264  INFO 5108 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 5108 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:46:08.273 DEBUG 5108 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:46:08.273  INFO 5108 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:46:08.504  INFO 5108 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:46:08.504  INFO 5108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:46:08.505  INFO 5108 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:46:10.398  INFO 5108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:46:10.651  INFO 5108 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 220ms. Found 5 JPA repository interfaces.
2020-02-07 20:46:11.339  INFO 5108 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:46:12.570  INFO 5108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:46:12.595  INFO 5108 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:46:12.595  INFO 5108 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:46:12.830  INFO 5108 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:46:12.830  INFO 5108 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4325 ms
2020-02-07 20:46:13.374  INFO 5108 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:46:13.528  INFO 5108 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:46:13.786  INFO 5108 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:46:13.964  INFO 5108 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:46:14.203  INFO 5108 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:46:14.242  INFO 5108 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:46:16.113  INFO 5108 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:46:16.124  INFO 5108 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:46:16.272  INFO 5108 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:46:17.878  WARN 5108 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:46:18.373  INFO 5108 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:46:18.639  INFO 5108 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:46:19.850  INFO 5108 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:46:19.857  INFO 5108 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.885 seconds (JVM running for 15.291)
2020-02-07 20:46:25.316  INFO 5108 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:46:25.317  INFO 5108 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:46:25.353  INFO 5108 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-07 20:46:25.418  INFO 5108 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:46:25.418  INFO 5108 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:46:25.418  INFO 5108 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:46:25.459  WARN 5108 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:46:25.459  WARN 5108 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:46:25.517  INFO 5108 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:46:25.517  INFO 5108 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:46:25.647  INFO 5108 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:46:25.654  INFO 5108 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:46:25.660  INFO 5108 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:46:25.694  INFO 5108 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:46:25.725 ERROR 5108 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.service.CommentServiceImpl.recursively(CommentServiceImpl.java:71)
	at com.lhy.blog.service.CommentServiceImpl.combineChildren(CommentServiceImpl.java:56)
	at com.lhy.blog.service.CommentServiceImpl.eachComment(CommentServiceImpl.java:47)
	at com.lhy.blog.service.CommentServiceImpl.listCommentByBlogId(CommentServiceImpl.java:24)
	at com.lhy.blog.service.CommentServiceImpl$$FastClassBySpringCGLIB$$4a14a6fd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.lhy.blog.service.CommentServiceImpl$$EnhancerBySpringCGLIB$$84c40846.listCommentByBlogId(<generated>)
	at com.lhy.blog.web.CommentController.comments(CommentController.java:37)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$7187f4ca.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:46:25.728  WARN 5108 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:48:21.644  INFO 12600 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 12600 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:48:21.649 DEBUG 12600 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:48:21.650  INFO 12600 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:48:21.737  INFO 12600 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:48:21.738  INFO 12600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:48:21.738  INFO 12600 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:48:23.512  INFO 12600 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:48:23.705  INFO 12600 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 180ms. Found 5 JPA repository interfaces.
2020-02-07 20:48:24.232  INFO 12600 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:48:25.080  INFO 12600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:48:25.094  INFO 12600 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:48:25.095  INFO 12600 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:48:25.273  INFO 12600 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:48:25.273  INFO 12600 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3535 ms
2020-02-07 20:48:25.690  INFO 12600 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:48:25.798  INFO 12600 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:48:26.002  INFO 12600 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:48:26.193  INFO 12600 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:48:26.405  INFO 12600 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:48:26.432  INFO 12600 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:48:27.919  INFO 12600 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:48:27.933  INFO 12600 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:48:28.047  INFO 12600 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:48:29.618  WARN 12600 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:48:30.097  INFO 12600 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:48:30.301  INFO 12600 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:48:31.264  INFO 12600 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:48:31.266  INFO 12600 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 10.813 seconds (JVM running for 12.92)
2020-02-07 20:48:37.658  INFO 12600 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:48:37.659  INFO 12600 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:48:37.691  INFO 12600 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 32 ms
2020-02-07 20:48:37.760  INFO 12600 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:48:37.760  INFO 12600 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:48:37.802  WARN 12600 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:48:37.802  WARN 12600 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:48:37.828  INFO 12600 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:48:37.853  INFO 12600 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:48:37.854  INFO 12600 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:48:38.005  INFO 12600 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:48:38.013  INFO 12600 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:48:38.050  INFO 12600 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:48:38.091  INFO 12600 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:48:38.105  INFO 12600 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:53:49.983  INFO 14256 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 14256 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 20:53:49.989 DEBUG 14256 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 20:53:49.989  INFO 14256 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 20:53:50.138  INFO 14256 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 20:53:50.139  INFO 14256 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 20:53:50.140  INFO 14256 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 20:53:51.194  INFO 14256 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 20:53:51.321  INFO 14256 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 117ms. Found 5 JPA repository interfaces.
2020-02-07 20:53:51.831  INFO 14256 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 20:53:52.544  INFO 14256 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 20:53:52.555  INFO 14256 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 20:53:52.555  INFO 14256 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 20:53:52.702  INFO 14256 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 20:53:52.703  INFO 14256 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2563 ms
2020-02-07 20:53:53.061  INFO 14256 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 20:53:53.165  INFO 14256 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 20:53:53.331  INFO 14256 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 20:53:53.464  INFO 14256 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 20:53:53.627  INFO 14256 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 20:53:53.647  INFO 14256 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 20:53:54.845  INFO 14256 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 20:53:54.853  INFO 14256 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 20:53:54.965  INFO 14256 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 20:53:56.128  WARN 14256 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 20:53:56.482  INFO 14256 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 20:53:56.693  INFO 14256 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 20:53:57.631  INFO 14256 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 20:53:57.638  INFO 14256 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 8.621 seconds (JVM running for 10.304)
2020-02-07 20:54:06.015  INFO 14256 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 20:54:06.015  INFO 14256 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 20:54:06.057  INFO 14256 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 41 ms
2020-02-07 20:54:06.126  INFO 14256 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:54:06.126  INFO 14256 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:54:06.126  INFO 14256 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:54:06.154  WARN 14256 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:54:06.163  WARN 14256 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 20:54:06.221  INFO 14256 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:54:06.222  INFO 14256 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:54:06.281  INFO 14256 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:54:06.316  INFO 14256 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:54:06.328  INFO 14256 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:54:06.360  INFO 14256 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:54:06.398  INFO 14256 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 20:54:53.044  INFO 14256 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='fe'w'f'w', email='123@qq.com', content='分为人发热', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 20:54:53.131  INFO 14256 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@6454ee68
2020-02-07 20:54:53.259  INFO 14256 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:54:53.278 ERROR 14256 --- [http-nio-8080-exec-7] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.web.CommentController.comments(CommentController.java:32)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$9d9986c6.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:54:53.281  WARN 14256 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 20:55:29.741  INFO 14256 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 20:55:29.741  INFO 14256 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 20:55:29.755  INFO 14256 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 20:55:29.763  INFO 14256 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 20:55:29.769  INFO 14256 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 20:55:29.771  INFO 14256 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 20:55:30.047  INFO 14256 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 20:55:30.060  INFO 14256 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 20:55:30.085  INFO 14256 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 20:55:30.100 ERROR 14256 --- [http-nio-8080-exec-2] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.web.CommentController.comments(CommentController.java:32)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$9d9986c6.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 20:55:30.101  WARN 14256 --- [http-nio-8080-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 21:10:45.214  INFO 7464 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 7464 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 21:10:45.219 DEBUG 7464 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 21:10:45.220  INFO 7464 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 21:10:45.439  INFO 7464 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 21:10:45.440  INFO 7464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 21:10:45.440  INFO 7464 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 21:10:47.559  INFO 7464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 21:10:47.737  INFO 7464 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 152ms. Found 5 JPA repository interfaces.
2020-02-07 21:10:48.580  INFO 7464 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 21:10:51.411  INFO 7464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 21:10:51.448  INFO 7464 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 21:10:51.449  INFO 7464 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 21:10:52.000  INFO 7464 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 21:10:52.004  INFO 7464 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6563 ms
2020-02-07 21:10:52.952  INFO 7464 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 21:10:53.234  INFO 7464 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 21:10:53.826  INFO 7464 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 21:10:54.217  INFO 7464 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 21:10:54.688  INFO 7464 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 21:10:54.740  INFO 7464 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 21:10:58.453  INFO 7464 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 21:10:58.468  INFO 7464 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 21:10:58.781  INFO 7464 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 21:11:01.469  WARN 7464 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 21:11:02.139  INFO 7464 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 21:11:02.438  INFO 7464 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 21:11:03.992  INFO 7464 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 21:11:04.001  INFO 7464 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 20.124 seconds (JVM running for 23.561)
2020-02-07 21:11:11.469  INFO 7464 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 21:11:11.469  INFO 7464 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 21:11:11.502  INFO 7464 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 33 ms
2020-02-07 21:11:11.563  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:11:11.563  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:11:11.563  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:11:11.605  WARN 7464 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:11:11.605  WARN 7464 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:11:11.663  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:11:11.665  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:11:11.733  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:11:11.746  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:11:11.762  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:11:11.793  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:11:11.850  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:15:02.726  INFO 7464 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:15:02.732  INFO 7464 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:15:02.770  INFO 7464 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:15:02.826  INFO 7464 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:15:03.048  INFO 7464 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:15:03.052  INFO 7464 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:15:03.061  INFO 7464 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:15:03.067  INFO 7464 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:15:03.069  INFO 7464 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:15:03.082  INFO 7464 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:15:43.833  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:15:43.842  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:15:43.845  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:15:43.859  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:15:43.860  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:15:43.862  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:15:44.181  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:15:44.185  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:15:44.192  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:15:44.193  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:15:50.016  INFO 7464 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 21:15:50.048  INFO 7464 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 21:19:02.170  INFO 7464 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:19:02.170  INFO 7464 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:19:02.179  INFO 7464 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:19:02.186  INFO 7464 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:19:22.512  INFO 7464 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='w34tf34', email='123@qq.com', content='dqfwrfew4', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160618_ATMGm.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 21:19:22.604  INFO 7464 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@33209853
2020-02-07 21:19:22.750  INFO 7464 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:19:22.772 ERROR 7464 --- [http-nio-8080-exec-10] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/comments/81, Exception : {}

java.lang.NullPointerException: null
	at com.lhy.blog.web.CommentController.comments(CommentController.java:32)
	at com.lhy.blog.web.CommentController$$FastClassBySpringCGLIB$$783b9f3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.lhy.blog.web.CommentController$$EnhancerBySpringCGLIB$$63f12c03.comments(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-07 21:19:22.774  WARN 7464 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.NullPointerException]
2020-02-07 21:19:47.921  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:19:47.921  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:19:47.935  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:19:47.943  INFO 7464 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:19:47.948  INFO 7464 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:19:47.949  INFO 7464 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:19:48.257  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:19:48.257  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:19:48.269  INFO 7464 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:19:48.275  INFO 7464 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:26:18.738  INFO 13940 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 13940 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 21:26:18.742 DEBUG 13940 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 21:26:18.743  INFO 13940 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 21:26:18.887  INFO 13940 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 21:26:18.888  INFO 13940 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 21:26:18.888  INFO 13940 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 21:26:20.934  INFO 13940 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 21:26:21.101  INFO 13940 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 147ms. Found 5 JPA repository interfaces.
2020-02-07 21:26:21.694  INFO 13940 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 21:26:22.607  INFO 13940 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 21:26:22.624  INFO 13940 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 21:26:22.625  INFO 13940 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 21:26:22.827  INFO 13940 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 21:26:22.830  INFO 13940 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3941 ms
2020-02-07 21:26:23.352  INFO 13940 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 21:26:23.485  INFO 13940 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 21:26:23.701  INFO 13940 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 21:26:23.904  INFO 13940 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 21:26:24.118  INFO 13940 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 21:26:24.153  INFO 13940 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 21:26:25.917  INFO 13940 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 21:26:25.931  INFO 13940 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 21:26:26.082  INFO 13940 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 21:26:28.131  WARN 13940 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 21:26:28.644  INFO 13940 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 21:26:28.897  INFO 13940 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 21:26:30.083  INFO 13940 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 21:26:30.091  INFO 13940 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.908 seconds (JVM running for 15.357)
2020-02-07 21:26:35.234  INFO 13940 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 21:26:35.235  INFO 13940 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 21:26:35.269  INFO 13940 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 34 ms
2020-02-07 21:26:35.332  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:26:35.332  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:26:35.332  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:26:35.360  WARN 13940 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:26:35.360  WARN 13940 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:26:35.445  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:26:35.445  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:26:35.493  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:26:35.543  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:26:35.587  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:26:35.627  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:26:35.673  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:26:58.171  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='1234', email='123@qq.com', content='啦啦啦', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160618_ATMGm.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 21:26:58.252  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@619d4e43
2020-02-07 21:26:58.391  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:26:58.409  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:28:08.191  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='67788', email='123@qq.com', content='kkkkk', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160618_ATMGm.thumb.700_0.jpeg', createTime=null}]}
2020-02-07 21:28:08.218  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@539c6cad
2020-02-07 21:28:08.448  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:28:08.473  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:31:58.450  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:31:58.453  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:31:58.464  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:31:58.450  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:31:58.489  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:31:58.496  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:31:58.755  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:31:58.763  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:31:58.801  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:31:58.821  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:34:43.916  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:34:43.940  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:34:43.948  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:34:43.948  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:34:43.959  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:34:43.975  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:34:44.263  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:34:44.264  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:34:44.270  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:34:44.285  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:36:33.863  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:36:33.864  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:36:33.879  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:36:33.880  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:36:33.887  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:36:33.891  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:36:34.201  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:36:34.201  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:36:34.211  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:36:34.220  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:37:33.322  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:37:33.322  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:37:33.539  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:37:33.549  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:37:33.625  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:37:33.626  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:37:33.627  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:37:33.630  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:37:33.637  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:37:33.642  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:37:50.500  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:37:50.505  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:37:50.507  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:37:50.519  INFO 13940 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:38:41.015  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:38:41.023  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:38:41.023  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:38:41.031  INFO 13940 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:38:41.037  INFO 13940 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:38:41.044  INFO 13940 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:38:41.372  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:38:41.373  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:38:41.378  INFO 13940 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:38:41.388  INFO 13940 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:39:41.275  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='de'w'f', email='123@qq.com', content='d'q'w'f'q'we', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 21:39:41.292  INFO 13940 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@32edfb7e
2020-02-07 21:39:41.522  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:39:41.541  INFO 13940 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:39:47.669  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 21:39:47.680  INFO 13940 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@442c4625
2020-02-07 21:39:48.016  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:39:48.035  INFO 13940 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 21:40:32.897  INFO 11656 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 11656 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 21:40:32.906 DEBUG 11656 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 21:40:32.906  INFO 11656 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 21:40:33.166  INFO 11656 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 21:40:33.168  INFO 11656 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 21:40:33.168  INFO 11656 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 21:40:34.732  INFO 11656 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 21:40:34.932  INFO 11656 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 180ms. Found 5 JPA repository interfaces.
2020-02-07 21:40:35.658  INFO 11656 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 21:40:36.893  INFO 11656 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 21:40:36.913  INFO 11656 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 21:40:36.913  INFO 11656 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 21:40:37.133  INFO 11656 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 21:40:37.137  INFO 11656 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3969 ms
2020-02-07 21:40:37.807  INFO 11656 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 21:40:38.068  INFO 11656 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 21:40:38.401  INFO 11656 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 21:40:38.609  INFO 11656 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 21:40:38.865  INFO 11656 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 21:40:38.914  INFO 11656 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 21:40:40.811  INFO 11656 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 21:40:40.825  INFO 11656 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 21:40:40.987  INFO 11656 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 21:40:43.022  WARN 11656 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 21:40:43.731  INFO 11656 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 21:40:44.093  INFO 11656 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 21:40:45.937  INFO 11656 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 21:40:45.941  INFO 11656 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 14.463 seconds (JVM running for 18.058)
2020-02-07 21:41:02.710  INFO 11656 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 21:41:02.710  INFO 11656 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 21:41:02.747  INFO 11656 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-07 21:41:02.820  INFO 11656 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:41:02.820  INFO 11656 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:41:02.820  INFO 11656 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:41:02.879  WARN 11656 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:41:02.879  WARN 11656 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:41:02.926  INFO 11656 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:41:02.929  INFO 11656 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:41:03.039  INFO 11656 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:41:03.050  INFO 11656 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:41:03.072  INFO 11656 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:41:03.086  INFO 11656 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:41:03.141  INFO 11656 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}]
2020-02-07 21:41:23.600  INFO 11656 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=null}]}
2020-02-07 21:41:23.691  INFO 11656 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@1b9f747f
2020-02-07 21:41:23.825  INFO 11656 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:41:23.870  INFO 11656 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:42:16.810  INFO 11656 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 21:42:16.842  INFO 11656 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 21:46:21.017  INFO 11656 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:46:21.018  INFO 11656 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:46:21.019  INFO 11656 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:46:21.033  INFO 11656 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 21:46:21.037  INFO 11656 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:46:21.047  INFO 11656 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:46:21.048  INFO 11656 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:46:21.054  INFO 11656 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 21:46:46.550  INFO 11656 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:46:46.551  INFO 11656 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:46:46.556  INFO 11656 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:46:46.577  INFO 11656 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:51:29.171  INFO 6852 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 6852 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 21:51:29.177 DEBUG 6852 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 21:51:29.178  INFO 6852 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 21:51:29.447  INFO 6852 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 21:51:29.449  INFO 6852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 21:51:29.449  INFO 6852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 21:51:32.720  INFO 6852 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 21:51:34.647  INFO 6852 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 1884ms. Found 5 JPA repository interfaces.
2020-02-07 21:51:37.929  INFO 6852 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 21:51:41.577  INFO 6852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 21:51:41.909  INFO 6852 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 21:51:41.912  INFO 6852 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 21:51:42.899  INFO 6852 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 21:51:42.907  INFO 6852 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 13458 ms
2020-02-07 21:51:48.606  INFO 6852 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 21:51:49.008  INFO 6852 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 21:51:49.885  INFO 6852 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 21:51:50.355  INFO 6852 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 21:51:50.836  INFO 6852 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 21:51:50.886  INFO 6852 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 21:51:55.099  INFO 6852 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 21:51:55.114  INFO 6852 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 21:51:55.523  INFO 6852 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 21:52:00.063  WARN 6852 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 21:52:01.480  INFO 6852 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 21:52:02.007  INFO 6852 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 21:52:04.484  INFO 6852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 21:52:04.490  INFO 6852 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 37.191 seconds (JVM running for 42.452)
2020-02-07 21:54:30.620  INFO 6852 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 21:54:30.621  INFO 6852 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 21:54:30.682  INFO 6852 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 61 ms
2020-02-07 21:54:30.754  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:54:30.755  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:54:30.756  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:54:30.765  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:54:30.768  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:54:30.876  WARN 6852 --- [http-nio-8080-exec-4] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:54:30.888  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:54:30.890  WARN 6852 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:54:30.925  WARN 6852 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 21:54:31.057  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:54:31.065  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:54:31.107  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:54:31.109  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:54:31.138  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:54:31.244  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:54:32.999  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:54:33.008  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:54:33.044  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:54:33.090  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:54:33.308  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:54:33.319  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:54:33.324  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 21:54:33.423  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 21:54:34.119  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:54:34.128  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:54:34.144  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:54:34.150  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:54:34.151  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:54:34.166  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:54:34.186  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:54:34.193  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:54:34.212  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:54:34.285  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:55:41.569  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:55:41.569  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:55:41.575  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:55:41.593  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:56:15.493  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:56:15.494  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:56:15.498  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:56:15.512  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:57:25.785  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:57:25.797  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:57:25.797  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:57:25.821  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:57:27.246  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:57:27.252  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:57:27.253  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:57:27.276  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:57:29.587  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:57:29.610  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:57:29.615  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:57:29.653  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:57:29.929  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:57:29.929  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 21:57:29.939  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:57:29.942  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 21:57:31.830  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:57:31.839  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:57:32.135  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:57:32.185  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=174, nickname='de'w'f', email='123@qq.com', content='qwdwef', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:39:47.676}, Comment{id=175, nickname='ver', email='12@qq.com', content='cdw', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160504_MYKS3.jpeg', createTime=2020-02-07 21:41:23.671}]
2020-02-07 21:59:35.752  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 21:59:35.754  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 21:59:35.768  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 21:59:35.761  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 21:59:35.791  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 21:59:35.820  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 21:59:36.061  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 21:59:36.066  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 21:59:36.072  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 21:59:36.088  INFO 6852 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 22:00:15.416  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='1617721824@qq.com', content='我是博主', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 22:00:15.552  INFO 6852 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@296d0172
2020-02-07 22:00:15.636  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:00:15.661  INFO 6852 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=176, nickname='李浩元', email='1617721824@qq.com', content='我是博主', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 22:00:15.517}]
2020-02-07 22:00:36.728  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='1617721824@qq.com', content='赵六，你好！', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=null}]}
2020-02-07 22:00:36.751  INFO 6852 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@4b2d2718
2020-02-07 22:00:36.982  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:00:37.001  INFO 6852 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=176, nickname='李浩元', email='1617721824@qq.com', content='我是博主', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 22:00:15.517}]
2020-02-07 22:01:05.657  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 22:01:05.661  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 22:01:05.672  INFO 6852 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 22:01:05.676  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 22:01:05.689  INFO 6852 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 22:01:05.689  INFO 6852 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 22:01:05.708  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 22:01:05.714  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:01:05.715  INFO 6852 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 22:01:05.727  INFO 6852 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}, Comment{id=176, nickname='李浩元', email='1617721824@qq.com', content='我是博主', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160547_FQcvE.jpeg', createTime=2020-02-07 22:00:15.517}]
2020-02-07 22:09:10.000  INFO 2032 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 2032 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 22:09:10.009 DEBUG 2032 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 22:09:10.009  INFO 2032 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 22:09:10.267  INFO 2032 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 22:09:10.268  INFO 2032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 22:09:10.269  INFO 2032 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 22:09:12.904  INFO 2032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 22:09:13.122  INFO 2032 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 197ms. Found 5 JPA repository interfaces.
2020-02-07 22:09:13.835  INFO 2032 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 22:09:15.044  INFO 2032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 22:09:15.065  INFO 2032 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 22:09:15.066  INFO 2032 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 22:09:15.336  INFO 2032 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 22:09:15.337  INFO 2032 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5068 ms
2020-02-07 22:09:15.954  INFO 2032 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 22:09:16.203  INFO 2032 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 22:09:16.614  INFO 2032 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 22:09:16.913  INFO 2032 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 22:09:17.216  INFO 2032 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 22:09:17.251  INFO 2032 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 22:09:19.378  INFO 2032 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 22:09:19.397  INFO 2032 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 22:09:19.610  INFO 2032 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 22:09:22.063  WARN 2032 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 22:09:22.618  INFO 2032 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 22:09:22.827  INFO 2032 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 22:09:23.619  INFO 2032 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 22:09:23.625  INFO 2032 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 15.369 seconds (JVM running for 18.531)
2020-02-07 22:15:05.732  INFO 2032 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 22:15:05.733  INFO 2032 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 22:15:05.762  INFO 2032 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 29 ms
2020-02-07 22:15:05.826  INFO 2032 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 22:15:05.834  INFO 2032 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 22:15:05.835  INFO 2032 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 22:15:05.837  INFO 2032 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:15:05.843  INFO 2032 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 22:15:05.890  WARN 2032 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 22:15:05.890  WARN 2032 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 22:15:06.079  INFO 2032 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 22:15:06.089  INFO 2032 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-06 21:23:15.256}
2020-02-07 22:15:06.127  INFO 2032 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 22:15:06.173  INFO 2032 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 22:15:06.189  INFO 2032 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 22:15:36.240  INFO 2032 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.post', args=[Comment{id=null, nickname='李浩元', email='1617721824@qq.com', content='你好', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160427_CPyBR.jpeg', createTime=null}]}
2020-02-07 22:15:36.319  INFO 2032 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : com.lhy.blog.vo.ResponseTipVO@41908d45
2020-02-07 22:15:36.463  INFO 2032 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:15:36.484  INFO 2032 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 22:17:48.425  INFO 2032 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/admire/81/1', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.admire', args=[81, 1]}
2020-02-07 22:17:48.474  INFO 2032 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : null
2020-02-07 22:17:52.706  INFO 2032 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 22:17:52.741  INFO 2032 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 22:27:51.368  INFO 16268 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 16268 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-07 22:27:51.374 DEBUG 16268 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-07 22:27:51.374  INFO 16268 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-07 22:27:51.584  INFO 16268 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-07 22:27:51.585  INFO 16268 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-07 22:27:51.585  INFO 16268 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-07 22:27:53.161  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-07 22:27:53.341  INFO 16268 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 163ms. Found 5 JPA repository interfaces.
2020-02-07 22:27:53.901  INFO 16268 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-07 22:27:54.733  INFO 16268 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-07 22:27:54.749  INFO 16268 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-07 22:27:54.749  INFO 16268 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-07 22:27:54.943  INFO 16268 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-07 22:27:54.943  INFO 16268 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3358 ms
2020-02-07 22:27:55.428  INFO 16268 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-07 22:27:55.550  INFO 16268 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-07 22:27:55.796  INFO 16268 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-07 22:27:56.028  INFO 16268 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-07 22:27:56.238  INFO 16268 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-07 22:27:56.264  INFO 16268 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-07 22:27:57.739  INFO 16268 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-07 22:27:57.754  INFO 16268 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-07 22:27:57.877  INFO 16268 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-07 22:27:59.376  WARN 16268 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-07 22:27:59.898  INFO 16268 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-07 22:28:00.155  INFO 16268 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-07 22:28:01.114  INFO 16268 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-07 22:28:01.118  INFO 16268 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 10.816 seconds (JVM running for 12.902)
2020-02-07 22:28:06.867  INFO 16268 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-07 22:28:06.868  INFO 16268 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-07 22:28:06.904  INFO 16268 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-07 22:28:06.955  INFO 16268 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 22:28:06.955  INFO 16268 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 22:28:06.955  INFO 16268 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 22:28:06.982  WARN 16268 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 22:28:06.982  WARN 16268 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-07 22:28:07.093  INFO 16268 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-07 22:17:48.462}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 22:28:07.115  INFO 16268 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 22:28:07.119  INFO 16268 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 22:28:07.129  INFO 16268 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 22:28:07.198  INFO 16268 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 22:28:09.493  INFO 16268 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 22:28:09.493  INFO 16268 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:28:09.530  INFO 16268 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=1, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-07 22:17:48.462}
2020-02-07 22:28:09.558  INFO 16268 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 22:28:13.175  INFO 16268 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 22:28:13.176  INFO 16268 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 22:28:13.184  INFO 16268 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 22:28:13.197  INFO 16268 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=1, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-07 22:17:48.462}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 22:28:13.208  INFO 16268 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 22:28:13.218  INFO 16268 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 22:28:13.526  INFO 16268 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[81]}
2020-02-07 22:28:13.526  INFO 16268 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/comments/81', ip='127.0.0.1', classMethod='com.lhy.blog.web.CommentController.comments', args=[81]}
2020-02-07 22:28:13.537  INFO 16268 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=81, title='1030 完美数列 (25 分)', content='#### 题目
给定一个正整数数列，和正整数$$p$$，设这个数列中的最大值是$$M$$，最小值是$$m$$，如果 $$M\le mp$$，则称这个数列是完美数列。

现在给定参数$$p$$和一些正整数，请你从中选择尽可能多的数构成一个完美数列。
#### 输入格式
输入第一行给出两个正整数`N`和`p`，其中$$N(\le10^5)$$是输入的正整数的个数，$$p(\le10^9)$$是给定的参数。第二行给出 `N`个正整数，每个数不超$$10^9$$。
#### 输出格式
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。
#### 输入样例
>10 8
2 3 20 4 5 1 6 7 8 9

#### 输出样例
>8

#### 分析
1. 首先应该想到的是给个数列排序，从到到小排序，可以用`sort()`函数实现，但我为了加深对快排的理解，手写的快排。
2. 一开始的思路，最大值`arr[n-1]`固定，然后用`arr[min]*p`依次与`arr[n-1]`比较，直到满足条件，这个逻辑是不严谨的，因为这样得到的个数不一定是最大的，例如序列$1, 2, 3, 4, 5, 6, 7, 8, 8, 20$，`p = 8`，按此方法得到`ans=8`，而实际最大值为9。
3. 尽然最大值也不固定，那么可以采用两个`left,right`，分别表示最小值下标和最大值下标，然后依次向中间靠拢，此时的策略是当`arr[right] > arr[left]`时，可以`compare(arr[left+1],arr[right])`或者`compare(arr[left],arr[right-1])`，由此想到用递归，提交发现有一个测试点超时。
4. 于是继续改进，放弃递归，定义两层`for()`循环，外层`(i=0; i<n; i++)`遍历，内层`(j=i+1; j<n; j++)`遍历，即每确定一个最小值，就在之后寻找满足条件的数。这个算法还可以优化，因为我们有`ans`来计数最大个数，所以当`i<j<i+ans`时，完全没必要考虑，所以可以优化为`for(j=i+ans; j<n; j++)`，那么外层循环能不能优化呢，当然能，我们发现当`n-i <= ans`时，此时后面满足条件的数以不可能大于`ans`，也可以不考虑，所以外层循环为`for(i=0; i<n-ans; i++)`。
#### 代码

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

const int MaxSize = 100000;

void Quick_sort(int arr[], int left, int right){
    if(left > right)
        return;
    int i=left, j=right;
    int tmp = arr[left];
    while(i != j){
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(i != j){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[left] = arr[i];
    arr[i] = tmp;
    Quick_sort(arr, left, j-1);
    Quick_sort(arr, i+1, right);
}

int main(){
    int n, p;
    int arr[MaxSize];
    scanf("%d%d", &n, &p);
    for(int i=0; i<n; i++)
        scanf("%d", arr+i);
    Quick_sort(arr, 0, n-1);

    int ans = 1;
    for(int i=0; i<n-ans; i++){
        long long tmp = (long long)arr[i]*p;	//这里的强制类型转换必须要加
        for(int j=i+ans; j<n; j++){
            if(arr[j] > tmp)
                break;
            if(j-i+1 > ans)
                ans = j-i+1;
        }
    }
    printf("%d\n", ans);
    return 0;
}

```
#### 提交结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/2019070212490222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-07 22:17:48.462}
2020-02-07 22:28:13.542  INFO 16268 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Comment{id=160, nickname='张三', email='123@qq.com', content='哈哈哈', avatar='https://lhy-blog.oss-cn-hangzhou.aliyuncs.com/avatar/20170507160739_8tNSP.jpeg', createTime=2020-02-07 19:19:51.406}]
2020-02-07 22:28:20.504  INFO 16268 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 22:28:20.517  INFO 16268 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-07 22:33:28.589  INFO 16268 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-07 22:33:28.589  INFO 16268 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-07 22:33:28.607  INFO 16268 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=48, name='填坑笔记'}, Type{id=88, name='算法'}]
2020-02-07 22:33:28.613  INFO 16268 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-07 22:33:28.616  INFO 16268 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}, Tag{id=43, name='Mysql'}]
2020-02-07 22:33:28.626  INFO 16268 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/900/600', flag='原创', views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-02-07 22:17:48.462}, Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-06 17:27:24.012}, Blog{id=132, title='123', content='null', firstPicture='https://picsum.photos/id/1027/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-02-04 14:40:08.158, updateTime=2020-02-04 14:43:27.58}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/900/600', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-07 22:33:28.919  INFO 16268 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 6, sort: updateTime: DESC]]}
2020-02-07 22:33:28.936  INFO 16268 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
