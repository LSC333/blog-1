2020-02-01 10:23:41.310  INFO 9228 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 9228 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 10:23:41.333 DEBUG 9228 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 10:23:41.334  INFO 9228 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 10:23:41.495  INFO 9228 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 10:23:41.496  INFO 9228 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 10:23:41.496  INFO 9228 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 10:23:43.186  INFO 9228 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 10:23:43.344  INFO 9228 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 142ms. Found 4 JPA repository interfaces.
2020-02-01 10:23:43.966  INFO 9228 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 10:23:45.009  INFO 9228 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 10:23:45.028  INFO 9228 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 10:23:45.028  INFO 9228 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 10:23:45.205  INFO 9228 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 10:23:45.206  INFO 9228 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3709 ms
2020-02-01 10:23:45.768  INFO 9228 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 10:23:45.959  INFO 9228 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 10:23:46.313  INFO 9228 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 10:23:46.559  INFO 9228 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 10:23:46.808  INFO 9228 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 10:23:46.845  INFO 9228 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 10:23:48.667  INFO 9228 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 10:23:48.685  INFO 9228 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 10:23:48.804  INFO 9228 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 10:23:50.622  WARN 9228 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 10:23:52.953  INFO 9228 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 10:23:53.649  INFO 9228 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 10:23:56.611  INFO 9228 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 10:23:56.621  INFO 9228 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 17.05 seconds (JVM running for 22.306)
2020-02-01 10:24:19.099  INFO 9228 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 10:24:19.099  INFO 9228 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 10:24:19.120  INFO 9228 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-02-01 10:24:19.182  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:24:19.182  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:24:19.187  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:24:19.226  WARN 9228 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 10:24:19.226  WARN 9228 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 10:24:19.447  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:24:19.449  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:24:19.463  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:25:57.609  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:25:57.610  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:25:57.627  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:25:57.635  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:25:57.641  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:25:57.681  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:25:58.355  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:25:58.373  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:25:58.469  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:25:58.496  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:25:58.682  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:25:58.720  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:35:36.730  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:35:36.730  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:35:36.789  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:35:36.794  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:35:37.025  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:35:37.057  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:36:56.014  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:36:56.039  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:36:56.220  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:36:56.245  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:36:56.356  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:36:56.356  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:36:56.371  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:36:56.376  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:38:36.543  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:38:36.553  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:38:36.564  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:38:36.576  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:38:36.891  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:38:36.891  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:38:36.912  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:38:36.924  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:40:22.270  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:40:22.283  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:40:22.454  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:40:22.468  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:40:22.581  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:40:22.588  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:40:22.604  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:40:22.606  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:40:59.262  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:40:59.280  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:40:59.449  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:40:59.463  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:40:59.575  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:40:59.575  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:40:59.586  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:40:59.597  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:41:26.438  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:41:26.440  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:41:26.455  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:41:26.459  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:41:26.761  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:41:26.775  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:41:26.780  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:41:26.788  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:41:37.391  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:41:37.400  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:41:37.401  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:41:37.417  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:41:37.431  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:41:37.453  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:41:37.737  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:41:37.744  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:46:46.916  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:46:46.932  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:46:47.033  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:46:47.049  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:46:47.215  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:46:47.229  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:46:47.234  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:46:47.239  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:46:47.675  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:46:47.676  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:46:47.689  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:46:47.691  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:46:48.005  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:46:48.005  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:46:48.014  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:46:48.032  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:47:29.221  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:47:29.234  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:47:29.388  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:47:29.399  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:47:29.523  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:47:29.523  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:47:29.536  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:47:29.544  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:48:44.713  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:48:44.722  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:48:44.879  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:48:44.896  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:48:45.033  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:48:45.033  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:48:45.046  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:48:45.060  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:53:36.858  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:53:36.866  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:53:36.877  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:53:36.887  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:53:37.182  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:53:37.184  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:53:37.278  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:53:37.281  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:53:56.088  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:53:56.088  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:53:56.104  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:53:56.107  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:53:56.410  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:53:56.411  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:53:56.432  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:53:56.441  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:54:34.563  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:54:34.563  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:54:34.572  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:54:34.577  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:54:34.579  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:54:34.596  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:54:34.900  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:54:34.912  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:54:40.906  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:54:40.910  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:54:40.920  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:54:40.926  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:54:41.251  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:54:41.273  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:54:41.279  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:54:41.284  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:55:34.755  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:55:34.765  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:55:34.835  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:55:34.852  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:55:35.058  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:55:35.074  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:55:35.189  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:55:35.191  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:55:42.106  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:55:42.110  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:55:42.121  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:55:42.132  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:55:42.431  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:55:42.447  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:55:42.453  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:55:42.462  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:58:15.455  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:58:15.462  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:58:15.583  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:58:15.596  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:58:15.762  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:58:15.764  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:58:15.772  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:58:15.781  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 10:58:47.178  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 10:58:47.197  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 10:58:47.338  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 10:58:47.350  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 10:58:47.486  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 10:58:47.492  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 10:58:47.501  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 10:58:47.504  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:09:53.917  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:09:53.925  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:09:54.112  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:09:54.130  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:09:54.220  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:09:54.222  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:09:54.228  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 11:09:54.234  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:10:01.679  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:10:01.679  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:10:01.690  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:10:01.690  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:10:01.983  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:10:01.986  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:10:01.992  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 11:10:02.003  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:10:09.789  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 8, sort: updateTime: DESC]]}
2020-02-01 11:10:09.800  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:10:31.391  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:10:31.391  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:10:31.401  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:10:31.403  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:10:31.411  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:10:31.422  INFO 9228 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:10:31.728  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:10:31.738  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 11:11:30.388  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:11:30.388  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:11:30.390  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:11:30.397  INFO 9228 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:11:30.400  INFO 9228 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:11:30.417  INFO 9228 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:11:30.724  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:11:30.732  INFO 9228 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}, Blog{id=58, title='Lake Counting——八连通的积水（深度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1027/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:12:18.379, updateTime=2020-01-31 19:48:39.358}, Blog{id=80, title='求最大公因数的两种方法（高效方法）', content='null', firstPicture='https://picsum.photos/id/1050/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 13:19:36.095, updateTime=2020-01-31 19:48:19.418}, Blog{id=81, title='1030 完美数列 (25 分)', content='null', firstPicture='https://picsum.photos/id/1055/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:38:16.986, updateTime=2020-01-31 19:47:59.597}, Blog{id=82, title='1028 人口普查 (20 分)', content='null', firstPicture='https://picsum.photos/id/1054/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:44:45.376, updateTime=2020-01-31 19:47:08.788}, Blog{id=83, title='1025 反转链表 (25 分)', content='null', firstPicture='https://picsum.photos/id/1051/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 14:50:46.363, updateTime=2020-01-31 19:46:50.944}]
2020-02-01 11:11:34.612  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 8, sort: updateTime: DESC]]}
2020-02-01 11:11:34.621  INFO 9228 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:11:42.982  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:11:42.994  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:11:44.705  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 8, sort: updateTime: DESC]]}
2020-02-01 11:11:44.723  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:14:20.801  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 8, sort: updateTime: DESC]]}
2020-02-01 11:14:20.803  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:14:20.808  INFO 9228 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:14:20.812  INFO 9228 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:14:21.117  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:14:21.143  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:14:21.145  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:14:21.174  INFO 9228 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 11:14:25.590  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 8, sort: updateTime: DESC]]}
2020-02-01 11:14:25.598  INFO 9228 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 11:15:09.340  INFO 12720 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 12720 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 11:15:09.350 DEBUG 12720 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 11:15:09.350  INFO 12720 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 11:15:09.460  INFO 12720 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 11:15:09.462  INFO 12720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 11:15:09.463  INFO 12720 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 11:15:11.604  INFO 12720 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 11:15:11.753  INFO 12720 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 134ms. Found 4 JPA repository interfaces.
2020-02-01 11:15:12.355  INFO 12720 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 11:15:13.293  INFO 12720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 11:15:13.310  INFO 12720 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 11:15:13.312  INFO 12720 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 11:15:13.537  INFO 12720 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 11:15:13.539  INFO 12720 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4076 ms
2020-02-01 11:15:14.089  INFO 12720 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 11:15:14.242  INFO 12720 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 11:15:14.451  INFO 12720 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 11:15:14.615  INFO 12720 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 11:15:14.832  INFO 12720 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 11:15:14.863  INFO 12720 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 11:15:16.413  INFO 12720 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 11:15:16.428  INFO 12720 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 11:15:16.562  INFO 12720 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 11:15:17.978  WARN 12720 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 11:15:18.408  INFO 12720 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 11:15:18.611  INFO 12720 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 11:15:19.907  INFO 12720 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 11:15:19.911  INFO 12720 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 11.994 seconds (JVM running for 14.603)
2020-02-01 11:15:29.850  INFO 12720 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 11:15:29.851  INFO 12720 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 11:15:29.896  INFO 12720 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 45 ms
2020-02-01 11:15:29.961  INFO 12720 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:15:29.961  INFO 12720 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:15:29.965  INFO 12720 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 11:15:30.001  WARN 12720 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 11:15:30.001  WARN 12720 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 11:15:30.035  INFO 12720 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:15:30.174  INFO 12720 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 11:15:30.187  INFO 12720 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:15:30.201  INFO 12720 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:15:30.208  INFO 12720 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:15:52.120  INFO 12720 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-01 11:15:52.151  INFO 12720 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:15:53.591  INFO 12720 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 2, size 5, sort: updateTime: DESC]]}
2020-02-01 11:15:53.616  INFO 12720 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 3 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:16:14.571  INFO 12720 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-01 11:16:14.599  INFO 12720 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:16:39.309  INFO 12720 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 2, size 5, sort: updateTime: DESC]]}
2020-02-01 11:16:39.325  INFO 12720 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 3 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:17:03.113  INFO 12720 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 11:17:03.113  INFO 12720 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 11:17:03.125  INFO 12720 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:17:03.141  INFO 12720 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 11:17:03.462  INFO 12720 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 11:17:03.462  INFO 12720 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 11:17:03.478  INFO 12720 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 11:17:03.502  INFO 12720 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 11:17:05.894  INFO 12720 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 2, size 5, sort: updateTime: DESC]]}
2020-02-01 11:17:05.907  INFO 12720 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 3 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:17:39.738  INFO 12720 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-01 11:17:39.759  INFO 12720 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:17:42.622  INFO 12720 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 11:17:42.639  INFO 12720 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:18:33.457  INFO 12720 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-01 11:18:33.482  INFO 12720 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:20:08.833  INFO 12720 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 2, size 5, sort: updateTime: DESC]]}
2020-02-01 11:20:08.857  INFO 12720 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 3 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:20:13.831  INFO 12720 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 1, size 5, sort: updateTime: DESC]]}
2020-02-01 11:20:13.851  INFO 12720 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 11:20:16.311  INFO 12720 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 11:20:16.330  INFO 12720 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:15:26.090  INFO 6728 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 6728 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 14:15:26.098 DEBUG 6728 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 14:15:26.098  INFO 6728 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 14:15:26.356  INFO 6728 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 14:15:26.358  INFO 6728 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 14:15:26.358  INFO 6728 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 14:15:28.325  INFO 6728 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 14:15:28.577  INFO 6728 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 219ms. Found 4 JPA repository interfaces.
2020-02-01 14:15:29.302  INFO 6728 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 14:15:30.308  INFO 6728 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 14:15:30.325  INFO 6728 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 14:15:30.326  INFO 6728 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 14:15:30.548  INFO 6728 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 14:15:30.555  INFO 6728 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4197 ms
2020-02-01 14:15:31.208  INFO 6728 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 14:15:31.389  INFO 6728 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 14:15:31.741  INFO 6728 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 14:15:32.039  INFO 6728 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 14:15:32.282  INFO 6728 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 14:15:32.312  INFO 6728 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 14:15:34.017  INFO 6728 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 14:15:34.029  INFO 6728 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 14:15:34.157  INFO 6728 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 14:15:35.833  WARN 6728 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 14:15:36.250  INFO 6728 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 14:15:36.444  INFO 6728 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 14:15:37.169  INFO 6728 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 14:15:37.179  INFO 6728 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.496 seconds (JVM running for 15.265)
2020-02-01 14:15:56.758  INFO 6728 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 14:15:56.759  INFO 6728 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 14:15:56.782  INFO 6728 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-02-01 14:15:56.839  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:15:56.839  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:15:56.839  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:15:56.846  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:15:56.879  WARN 6728 --- [http-nio-8080-exec-2] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 14:15:56.879  WARN 6728 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 14:15:57.050  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:15:57.061  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:15:57.072  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:15:57.085  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:17:15.289  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:17:15.289  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:17:15.308  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:17:15.323  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:17:15.612  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:17:15.633  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:17:15.650  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:17:15.655  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:17:41.209  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:17:41.226  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:17:41.233  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:17:41.259  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:17:41.557  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:17:41.561  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:17:41.597  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:17:41.604  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:20:08.342  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:20:08.362  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:20:08.524  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:20:08.548  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:20:08.645  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:20:08.648  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:20:08.660  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:20:08.675  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:20:51.164  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:20:51.176  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:20:51.369  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:20:51.398  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:20:51.464  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:20:51.473  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:20:51.481  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:20:51.486  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:22:38.136  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:22:38.144  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:22:38.149  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:22:38.153  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:22:38.162  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:22:38.178  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:22:38.470  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:22:38.489  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:24:04.010  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:24:04.011  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:24:04.020  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:24:04.023  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:24:04.316  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:24:04.316  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:24:04.329  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:24:04.347  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:27:07.509  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:27:07.525  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:27:07.634  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:27:07.650  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:27:07.809  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:27:07.809  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:27:07.825  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:27:07.843  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:27:20.749  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:27:20.762  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:27:20.931  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:27:20.951  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:27:21.049  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:27:21.052  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:27:21.059  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:27:21.074  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:31:31.222  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:31:31.238  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:31:31.420  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:31:31.440  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:31:31.525  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:31:31.535  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:31:31.542  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:31:31.545  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:31:35.713  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:31:35.715  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:31:35.723  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:31:35.728  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:31:36.058  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:31:36.060  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:31:37.537  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:31:37.549  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:31:55.069  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:31:55.078  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:31:55.165  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:31:55.176  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:31:55.379  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:31:55.380  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:31:55.389  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:31:55.398  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:32:39.368  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:32:39.376  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:32:39.535  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:32:39.548  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:32:39.750  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:32:39.750  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:32:39.760  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:32:39.772  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:32:58.321  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:32:58.322  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:32:58.336  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:32:58.336  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:32:58.345  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:32:58.362  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:32:58.658  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:32:58.673  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:33:24.803  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:33:24.804  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:33:24.804  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:33:24.811  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:33:24.815  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:33:24.824  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:33:25.132  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:33:25.142  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:38:05.214  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:38:05.216  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:38:05.216  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:38:05.226  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:38:05.229  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:38:05.233  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:38:05.551  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:38:05.562  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:39:03.288  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:39:03.298  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:39:03.302  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:39:03.318  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:39:03.624  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:39:03.624  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:39:03.634  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:39:03.650  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:46:36.942  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:46:36.954  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:46:36.974  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:46:36.991  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:46:37.274  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:46:37.291  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:46:37.298  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:46:37.307  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:47:32.144  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:47:32.144  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:47:32.146  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:47:32.157  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:47:32.167  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:47:32.179  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:47:32.522  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:47:32.536  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:50:22.536  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:50:22.545  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:50:22.709  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:50:22.723  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:50:22.844  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:50:22.844  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:50:22.857  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:50:22.867  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:50:23.056  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:50:23.072  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:50:23.072  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:50:23.087  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:50:23.374  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:50:23.386  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:50:23.395  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:50:23.397  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:50:35.028  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:50:35.043  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:50:35.200  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:50:35.214  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:50:35.332  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:50:35.341  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:50:35.355  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:50:35.356  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:50:50.520  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:50:50.520  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:50:50.527  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:50:50.529  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:50:50.528  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:50:50.553  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:50:50.848  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:50:50.858  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:58:57.632  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:58:57.632  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:58:57.633  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:58:57.643  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:58:57.643  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:58:57.659  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:58:57.982  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:58:57.992  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:59:24.141  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:59:24.141  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:59:24.150  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:59:24.152  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:59:24.157  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:59:24.175  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:59:24.499  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:59:24.508  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:59:37.549  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:59:37.560  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:59:37.561  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:59:37.562  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:59:37.562  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:59:37.575  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:59:37.580  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 14:59:37.586  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:59:56.215  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 14:59:56.215  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 14:59:56.227  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 14:59:56.229  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 14:59:56.526  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 14:59:56.539  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 14:59:56.543  INFO 6728 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 14:59:56.545  INFO 6728 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:02:32.738  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:02:32.746  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:02:32.746  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:02:32.747  INFO 6728 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:02:32.755  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:02:32.759  INFO 6728 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 15:02:33.049  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:02:33.057  INFO 6728 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:02:39.458  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:02:39.466  INFO 6728 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:02:39.774  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:02:39.774  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:02:39.774  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:02:39.783  INFO 6728 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:02:39.792  INFO 6728 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:02:39.800  INFO 6728 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 15:08:26.518 ERROR 6728 --- [http-nio-8080-exec-5] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/search, Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:201)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:421)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:449)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:67)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 15:08:26.522  WARN 6728 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-02-01 15:08:40.072 ERROR 6728 --- [http-nio-8080-exec-10] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/search, Exception : {}

org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'query' is not present
	at org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.handleMissingValue(RequestParamMethodArgumentResolver.java:204)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:114)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 15:08:40.072  WARN 6728 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'query' is not present]
2020-02-01 15:15:02.039  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:15:02.077  INFO 6728 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:15:02.267 ERROR 6728 --- [http-nio-8080-exec-9] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/search, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
Caused by: java.lang.StackOverflowError: null
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:740)
	... 1011 common frames omitted

2020-02-01 15:15:02.295  WARN 6728 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])]
2020-02-01 15:15:02.303 ERROR 6728 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 15:15:02.356 ERROR 6728 --- [http-nio-8080-exec-9] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/search, Exception : {}

org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1429)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:921)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	... 55 common frames omitted

2020-02-01 15:15:02.356  WARN 6728 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。]
2020-02-01 15:15:02.358 ERROR 6728 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 15:15:02.359 ERROR 6728 --- [http-nio-8080-exec-9] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error]

org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted

2020-02-01 15:16:27.784  INFO 12748 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 12748 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 15:16:27.793 DEBUG 12748 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 15:16:27.794  INFO 12748 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 15:16:27.960  INFO 12748 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 15:16:27.961  INFO 12748 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 15:16:27.961  INFO 12748 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 15:16:29.874  INFO 12748 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 15:16:30.053  INFO 12748 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 163ms. Found 4 JPA repository interfaces.
2020-02-01 15:16:30.682  INFO 12748 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 15:16:31.717  INFO 12748 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 15:16:31.734  INFO 12748 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 15:16:31.735  INFO 12748 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 15:16:32.080  INFO 12748 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 15:16:32.081  INFO 12748 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4119 ms
2020-02-01 15:16:32.616  INFO 12748 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 15:16:32.803  INFO 12748 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 15:16:33.079  INFO 12748 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 15:16:33.306  INFO 12748 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 15:16:33.644  INFO 12748 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 15:16:33.691  INFO 12748 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 15:16:35.718  INFO 12748 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 15:16:35.737  INFO 12748 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 15:16:35.890  INFO 12748 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 15:16:37.771  WARN 12748 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 15:16:38.531  INFO 12748 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 15:16:38.837  INFO 12748 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 15:16:40.158  INFO 12748 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 15:16:40.165  INFO 12748 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 14.206 seconds (JVM running for 17.472)
2020-02-01 15:16:45.952  INFO 12748 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 15:16:45.953  INFO 12748 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 15:16:45.976  INFO 12748 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-02-01 15:16:46.102  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:16:46.335  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:22:50.789  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:22:50.801  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:22:50.804  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:22:50.812  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:22:50.829  WARN 12748 --- [http-nio-8080-exec-4] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 15:22:50.831  WARN 12748 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 15:22:50.841  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:22:50.918  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:22:50.960  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 15:22:50.984  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:23:17.008  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], d23r2]}
2020-02-01 15:23:17.014  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:23:40.015  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:23:40.033  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:24:02.861  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 345]}
2020-02-01 15:24:02.869  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:24:09.343  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:24:09.355  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:25:12.774  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:25:12.784  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:25:47.553  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:25:47.562  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:27:35.654  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:27:35.674  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:31:18.774  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:31:18.774  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:31:18.788  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:31:18.788  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:31:18.797  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:31:18.837  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 15:31:19.119  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:31:19.139  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:31:27.429  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:31:27.439  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:34:43.138  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 7889]}
2020-02-01 15:34:43.143  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:36:40.537  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 7889]}
2020-02-01 15:36:40.542  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:36:55.122  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:36:55.135  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:37:00.460  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 12]}
2020-02-01 15:37:00.479  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 15:37:08.189  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:37:08.199  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:38:29.755  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:38:29.767  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:38:34.199  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 1, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:38:34.221  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 2 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:38:36.712  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 2, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:38:36.723  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 3 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:41:24.310  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:41:24.328  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:41:25.723  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1]}
2020-02-01 15:41:25.739  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:41:31.832  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 12]}
2020-02-01 15:41:31.847  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 15:41:37.158  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:41:37.171  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:41:41.317  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:41:41.320  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:42:57.167  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:42:57.171  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:44:13.090  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:44:13.095  INFO 12748 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:45:21.744  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:45:21.747  INFO 12748 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:47:29.222  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:47:29.227  INFO 12748 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:47:54.398  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 1234]}
2020-02-01 15:47:54.401  INFO 12748 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 0 containing UNKNOWN instances
2020-02-01 15:47:57.158  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 123]}
2020-02-01 15:47:57.167  INFO 12748 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 1 containing com.lhy.blog.po.Blog instances
2020-02-01 15:48:00.174  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/search', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.search', args=[Page request [number: 0, size 5, sort: updateTime: DESC], 12]}
2020-02-01 15:48:00.186  INFO 12748 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 2 containing com.lhy.blog.po.Blog instances
2020-02-01 15:48:38.762  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:48:38.766  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:48:38.768  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:48:38.778  INFO 12748 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:48:38.790  INFO 12748 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:48:38.798  INFO 12748 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 15:48:39.096  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:48:39.108  INFO 12748 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:54:51.605  INFO 8276 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 8276 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 15:54:51.614 DEBUG 8276 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 15:54:51.615  INFO 8276 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 15:54:51.755  INFO 8276 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 15:54:51.757  INFO 8276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 15:54:51.758  INFO 8276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 15:54:53.947  INFO 8276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 15:54:54.125  INFO 8276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 149ms. Found 4 JPA repository interfaces.
2020-02-01 15:54:54.811  INFO 8276 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 15:54:55.947  INFO 8276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 15:54:55.962  INFO 8276 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 15:54:55.963  INFO 8276 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 15:54:56.147  INFO 8276 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 15:54:56.159  INFO 8276 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4400 ms
2020-02-01 15:54:56.793  INFO 8276 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 15:54:56.973  INFO 8276 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 15:54:57.210  INFO 8276 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 15:54:57.406  INFO 8276 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 15:54:57.616  INFO 8276 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 15:54:57.648  INFO 8276 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 15:54:59.571  INFO 8276 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 15:54:59.587  INFO 8276 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 15:54:59.749  INFO 8276 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 15:55:01.704  WARN 8276 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 15:55:02.146  INFO 8276 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 15:55:02.335  INFO 8276 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 15:55:03.411  INFO 8276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 15:55:03.419  INFO 8276 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 13.461 seconds (JVM running for 17.449)
2020-02-01 15:57:13.455  INFO 8276 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 15:57:13.456  INFO 8276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 15:57:13.492  INFO 8276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 36 ms
2020-02-01 15:57:13.589  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 15:57:13.598  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 15:57:13.610  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 15:57:13.619  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 15:57:13.639  WARN 8276 --- [http-nio-8080-exec-3] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 15:57:13.639  WARN 8276 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 15:57:13.815  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 15:57:13.821  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 15:57:13.829  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 15:57:13.835  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:01:07.205  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:01:07.205  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:01:07.216  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:01:07.223  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:01:07.236  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:01:07.252  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:01:07.564  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:01:07.578  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:01:12.101  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:01:12.101  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:01:12.122  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:01:12.133  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:01:12.137  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:01:12.170  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:01:12.441  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:01:12.459  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:03:12.224  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:03:12.224  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:03:12.238  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:03:12.242  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:03:12.250  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:03:12.265  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:03:12.540  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:03:12.551  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:06:22.892  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:06:22.896  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:06:22.898  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:06:22.908  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:06:22.913  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:06:22.917  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:06:22.938  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:06:22.951  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:09:36.761  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:09:36.761  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:09:36.780  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:09:36.786  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:09:36.788  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:09:36.811  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:09:37.100  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:09:37.110  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:10:24.298  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:10:24.300  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:10:24.305  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:10:24.312  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:10:24.322  INFO 8276 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:10:24.335  INFO 8276 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:10:24.634  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:10:24.643  INFO 8276 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:10:30.160  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:10:30.161  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:10:30.173  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:10:30.178  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:10:30.462  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:10:30.495  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:10:30.507  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:10:30.520  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:10:34.106  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 16:10:34.123  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 16:10:34.125  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 16:10:34.126  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 16:10:34.129  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 16:10:34.145  INFO 8276 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 16:10:34.152  INFO 8276 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 16:10:34.154  INFO 8276 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 16:18:25.901  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:18:25.924  INFO 8276 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 16:18:26.124 ERROR 8276 --- [http-nio-8080-exec-10] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/68, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
Caused by: java.lang.StackOverflowError: null
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:740)
	... 1011 common frames omitted

2020-02-01 16:18:26.150  WARN 8276 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"])]
2020-02-01 16:18:26.531 ERROR 8276 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 16:18:26.555 ERROR 8276 --- [http-nio-8080-exec-10] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/68, Exception : {}

org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1429)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:921)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:226)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	... 55 common frames omitted

2020-02-01 16:18:26.556  WARN 8276 --- [http-nio-8080-exec-10] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.apache.catalina.connector.ClientAbortException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。]
2020-02-01 16:18:26.570 ERROR 8276 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 16:18:26.574 ERROR 8276 --- [http-nio-8080-exec-10] o.a.c.c.C.[Tomcat].[localhost]           : Exception Processing ErrorPage[errorCode=0, location=/error]

org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:388)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:114)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted

2020-02-01 16:18:42.028  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:18:42.046  INFO 8276 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 16:18:42.131 ERROR 8276 --- [http-nio-8080-exec-9] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/68, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
Caused by: java.lang.StackOverflowError: null
	at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:191)
	at org.apache.catalina.connector.OutputBuffer.transfer(OutputBuffer.java:801)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:677)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)

2020-02-01 16:18:42.153  WARN 8276 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])]
2020-02-01 16:18:42.158 ERROR 8276 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 16:18:49.529  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:18:49.537  INFO 8276 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 16:18:49.629 ERROR 8276 --- [http-nio-8080-exec-4] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/68, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
Caused by: java.lang.StackOverflowError: null
	at java.nio.channels.spi.AbstractSelectableChannel.keyFor(AbstractSelectableChannel.java:162)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:85)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1257)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:741)
	at org.apache.tomcat.util.net.SocketWrapperBase.writeBlocking(SocketWrapperBase.java:561)
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:112)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	... 2 common frames omitted

2020-02-01 16:18:49.652  WARN 8276 --- [http-nio-8080-exec-4] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])]
2020-02-01 16:18:49.659 ERROR 8276 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 16:19:01.868  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:19:01.878  INFO 8276 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 16:19:01.965 ERROR 8276 --- [http-nio-8080-exec-3] c.l.b.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/68, Exception : {}

org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:295)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:124)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:737)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
Caused by: java.lang.StackOverflowError: null
	at org.apache.tomcat.util.net.SocketWrapperBase.write(SocketWrapperBase.java:505)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.doWrite(Http11OutputBuffer.java:538)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:110)
	at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:190)
	at org.apache.coyote.Response.doWrite(Response.java:601)
	at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:339)
	at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:776)
	at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:681)
	at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:386)
	at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:364)
	at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer(UTF8JsonGenerator.java:2137)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(UTF8JsonGenerator.java:1451)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(UTF8JsonGenerator.java:1398)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(UTF8JsonGenerator.java:1281)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(UTF8JsonGenerator.java:502)
	at com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(StringSerializer.java:41)
	... 1007 common frames omitted

2020-02-01 16:19:01.979  WARN 8276 --- [http-nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["type"]->com.lhy.blog.po.Type["blogs"]->org.hibernate.collection.internal.PersistentBag[0]->com.lhy.blog.po.Blog["content"])]
2020-02-01 16:19:01.982 ERROR 8276 --- [http-nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause

java.lang.IllegalStateException: getOutputStream() has already been called for this response
	at org.apache.catalina.connector.Response.getWriter(Response.java:581)
	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:227)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:360)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-02-01 16:20:05.335  INFO 15136 --- [restartedMain] com.lhy.blog.BlogApplication             : Starting BlogApplication on DESKTOP-KCJEFBA with PID 15136 (E:\CODE\Java\blog\target\classes started by 16177 in E:\CODE\Java\blog)
2020-02-01 16:20:05.339 DEBUG 15136 --- [restartedMain] com.lhy.blog.BlogApplication             : Running with Spring Boot v2.2.4.RELEASE, Spring v5.2.3.RELEASE
2020-02-01 16:20:05.339  INFO 15136 --- [restartedMain] com.lhy.blog.BlogApplication             : The following profiles are active: dev
2020-02-01 16:20:05.466  INFO 15136 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\16177\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/16177/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-02-01 16:20:05.467  INFO 15136 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-02-01 16:20:05.467  INFO 15136 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-02-01 16:20:07.296  INFO 15136 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-02-01 16:20:07.462  INFO 15136 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 137ms. Found 4 JPA repository interfaces.
2020-02-01 16:20:08.040  INFO 15136 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-01 16:20:08.894  INFO 15136 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-02-01 16:20:08.908  INFO 15136 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-02-01 16:20:08.909  INFO 15136 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-02-01 16:20:09.098  INFO 15136 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-02-01 16:20:09.099  INFO 15136 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3632 ms
2020-02-01 16:20:09.533  INFO 15136 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-02-01 16:20:09.661  INFO 15136 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.10.Final}
2020-02-01 16:20:09.865  INFO 15136 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-02-01 16:20:10.024  INFO 15136 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-02-01 16:20:10.286  INFO 15136 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-02-01 16:20:10.310  INFO 15136 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL57Dialect
2020-02-01 16:20:11.873  INFO 15136 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-02-01 16:20:11.887  INFO 15136 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-02-01 16:20:12.012  INFO 15136 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-02-01 16:20:13.892  WARN 15136 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-02-01 16:20:14.916  INFO 15136 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-02-01 16:20:15.443  INFO 15136 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-02-01 16:20:16.554  INFO 15136 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-02-01 16:20:16.564  INFO 15136 --- [restartedMain] com.lhy.blog.BlogApplication             : Started BlogApplication in 12.601 seconds (JVM running for 15.14)
2020-02-01 16:20:17.139  INFO 15136 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-01 16:20:17.140  INFO 15136 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-02-01 16:20:17.186  INFO 15136 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 45 ms
2020-02-01 16:20:17.320  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:20:17.599  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 16:23:05.137  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 16:23:05.145  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:31:22.177  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:31:22.187  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:32:51.564  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:32:51.579  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:33:51.145  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:33:51.154  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:35:43.678  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:35:43.678  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:35:43.678  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:35:43.699  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:35:43.716  WARN 15136 --- [http-nio-8080-exec-6] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 19:35:43.719  WARN 15136 --- [http-nio-8080-exec-9] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-02-01 19:35:43.747  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:35:43.787  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:35:43.806  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:35:43.809  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:37:20.049  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:37:20.066  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:37:20.210  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:37:20.239  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:37:20.382  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:37:20.383  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:37:20.401  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:37:20.417  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:37:50.855  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:37:50.871  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:37:50.999  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:37:51.018  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:37:51.160  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:37:51.191  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:37:51.191  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:37:51.212  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:51:58.731  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:51:58.751  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:52:13.197  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:52:13.205  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:52:13.214  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:52:13.214  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:52:13.219  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:52:13.247  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:52:13.255  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:52:13.269  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:52:17.220  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 19:52:17.228  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 19:52:20.947  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:52:20.954  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:52:20.959  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:52:20.965  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:52:20.965  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:52:20.980  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:52:20.981  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:52:21.004  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:52:22.693  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 19:52:22.694  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 19:52:22.708  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 19:52:22.717  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 19:52:23.003  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 19:52:23.025  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 19:52:23.033  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 19:52:23.037  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 19:53:01.331  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:53:01.337  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 19:54:12.088  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 19:54:12.097  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:18:04.837  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:18:04.846  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:20:30.581  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:20:30.591  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:21:01.071  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:21:01.078  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:21:30.987  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:21:30.991  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:22:23.333  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:22:23.337  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:24:11.599  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:24:11.607  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:31:35.757  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:31:35.763  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:33:29.127  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:33:29.132  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:35:21.024  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:35:21.031  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:38:17.604  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:38:17.610  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:38:26.111  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:38:26.115  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:38:48.625  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:38:48.629  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:38:54.874  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:38:54.878  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:39:22.794  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:39:22.803  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:39:26.432  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:39:26.437  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:39:57.741  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:39:57.748  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:40:55.643  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:40:55.648  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:41:39.287  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:41:39.294  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:42:19.291  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 20:42:19.299  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 20:43:13.438  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 20:43:13.450  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 20:43:13.450  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 20:43:13.454  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 20:43:13.458  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 20:43:13.472  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 20:43:13.486  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 20:43:13.486  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 20:43:15.511  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:43:15.517  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:44:18.820  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:44:18.828  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:44:46.410  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:44:46.416  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:46:02.815  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:46:02.820  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:46:21.656  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:46:21.664  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:46:39.032  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:46:39.040  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:47:00.949  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:47:00.960  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:47:04.123  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:47:04.129  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:50:11.019  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:50:11.027  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:50:29.511  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:50:29.522  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:51:09.087  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:51:09.091  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:51:25.323  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:51:25.332  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:51:46.813  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:51:46.817  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:52:00.461  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/67', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[67]}
2020-02-01 20:52:00.468  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=67, title='表达式求值', content='表达式求值是程序设计编译中的一个最基本的问题，他的实现是栈应用的一个典型范例：

表达式中包含的运算符有`（，），+，-，*，/`，共七种运算符，我们首先要确定这七种运算符的优先级，显然`()`的优先级最高，`*,/`次之，`+,-`的优先级最低，那么`(`与`)`、`+`与`+`、`-`与`-`$$\cdots$$，这些优先级又怎么区分呢？我么用栈求表达式值时是将运算符存在栈中，例如当前栈中有`+`，当再来`+,-`时，显然栈中的`+`可以出栈了，那么栈中`+`的优先级就高于栈外的`+,-`，因此优先级相同的运算符在栈内的优先级应该高于栈外的优先级。下面以表格的形式给出各运算符的优先级：

| 操作符 | # | ( | *,/| +,- | ) |
| :-: | :-: | :-: | :-: | :-: | :-: |
| isp | 0 | 1 | 5 | 3 | 6 |
| icp | 0 | 6 | 4 | 2 | 1 |


其中引入`#`是为了统一运算。
对应的计算优先级的函数如下：

```cpp
int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}
```
这里介绍两种表达式求值的思路：
###### 1. 直接求值法
直接法顾名思义就是直接计算，不需要事先处理表达式；该方法需要两个栈，栈`nsta`存数字，栈`osta`存运算符，一次遍历表达式字符串，这会出现一下几种操作：
1. 当前字符是数字时，直接压入`nsta`；
2. 当前字符是运算符时:
	1. `isp(osta.top) < icp(ch)`，`ch`直接入栈；
	2. `isp(osta.top) > icp(ch)`，`osta.top`出栈，运算结果压入`nsta`，重复步骤1；
	3. `isp(osta.top) == icp(ch)`，只有两种可能，`isp('(') == icp(')')`，`isp('#') == icp('#')`，第一种情况左括号出栈，第二种情况表达式计算结束。

对应直接的直接发代码如下：

```cpp
void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;	//注意顺序
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;	//继续比较osta中的下一个运算符
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());	//nsta中只有一个元素，即为最终结果
}
```
###### 2. 后缀表达式求值
我们的表达式其实是中缀表达式，若将中缀表达式转化为后缀表达式，则只需直接计算即可，不需要考虑优先级的问题，因此将中缀表达式转化为后缀表达式的过程就是按优先级排列运算符，
其中将中缀表达式转化为后缀表达式的代码如下：

```cpp
queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}
```

 这里将后缀表达式存在队列中，同样也可以存在数组中，最后直接计算的代码如下：
 

```cpp
void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

```
最终完整的代码如下：

```cpp
#include <stdio.h>
#include <iostream>
#include <stack>
#include <queue>
#include <cstring>
using namespace std;

int Isp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 1; break;
        case '*': k = 5; break;
        case '/': k = 5; break;
        case '+': k = 3; break;
        case '-': k = 3; break;
        case ')': k = 6; break;
    }
    return k;
}

int Icp(char ch){
    int k;
    switch(ch){
        case '#': k = 0; break;
        case '(': k = 6; break;
        case '*': k = 4; break;
        case '/': k = 4; break;
        case '+': k = 2; break;
        case '-': k = 2; break;
        case ')': k = 1; break;
        default: k = -1;
    }
    return k;
}

queue<char> getSuffix(char str[]){
    stack<char> sta;
    queue<char> que;
    int len = strlen(str);
    str[len++] = '#';
    sta.push('#');
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = sta.top();
        if(Icp(tmp1) < 0)
            que.push(tmp1);
        else if(Isp(tmp2) < Icp(tmp1))
            sta.push(tmp1);
        else if(Isp(tmp2) > Icp(tmp1)){
            que.push(tmp2);
            sta.pop();
            i--;
        }
        else
            sta.pop();
    }
    queue<char> que1 = que;
    printf("转化为后缀表达式如下：");
    while(!que1.empty()){
        printf("%c", que1.front());
        que1.pop();
    }
    printf("\n");
    return que;
}

void calcSuffix(queue<char> que){
    stack<int> exp;
    int a, b;
    while(!que.empty()){
        if(que.front() >= '0' && que.front() <= '9')
            exp.push(que.front()-'0');
        else{
            a = exp.top();
            exp.pop();
            b = exp.top();
            exp.pop();
            switch(que.front()){
                case '+': exp.push(a+b); break;
                case '-': exp.push(b-a); break;
                case '*': exp.push(a*b); break;
                case '/': exp.push(b/a); break;
            }
        }
        que.pop();
    }
    printf("通过后缀表达式计算结果为: %d\n", exp.top());
}

void directCalc(char str[]){
    stack<int> nsta;    //运算数栈
    stack<char> osta;   //运算符栈
    int len = strlen(str);
    str[len++] = '#';
    osta.push('#');
    int a, b;
    for(int i=0; i<len; i++){
        char tmp1 = str[i];
        char tmp2 = osta.top();
        if(tmp1 >= '0' && tmp2 <= '9')
            nsta.push(tmp1-'0');
        else{
            if(Isp(tmp2) < Icp(tmp1))
                osta.push(tmp1);
            else if(Isp(tmp2) == Icp(tmp1))
                osta.pop();
            else{
                a = nsta.top();
                nsta.pop();
                b = nsta.top();
                nsta.pop();
                switch(osta.top()){
                    case '+': nsta.push(a+b); break;
                    case '-': nsta.push(b-a); break;
                    case '*': nsta.push(a*b); break;
                    case '/': nsta.push(b/a); break;
                }
                osta.pop();
                i--;
            }
        }
    }
    printf("直接计算结果：%d\n", nsta.top());
}
//  a+b-a*((c+d)/e-f)+g
int main(){
    char str[100];
    queue<char> que;
    scanf("%s", str);
    // 转化为后缀表达式，再通过后缀表达式计算结果
//    que = getSuffix(str);
//    calcSuffix(que);
    // 直接计算
    directCalc(str);
    return 0;
}

```
', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}
2020-02-01 20:52:13.534  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 20:52:13.542  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 20:52:13.545  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 20:52:13.549  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 20:52:13.551  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 20:52:13.570  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 20:52:13.570  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 20:52:13.585  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 20:52:16.722  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/65', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[65]}
2020-02-01 20:52:16.727  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=65, title='css实现摩天轮动画', content='**项目地址：** [https://github.com/lihaoyuan1/animation/tree/master/wheel](https://github.com/lihaoyuan1/animation/tree/master/wheel)
**查看效果：**[http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html](http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html)
因为图片较多，没翻墙的可能加载有些缓慢，稍等片刻即可；
效果图如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190715185929349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}
2020-02-01 20:53:52.846  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/65', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[65]}
2020-02-01 20:53:52.853  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=65, title='css实现摩天轮动画', content='**项目地址：** [https://github.com/lihaoyuan1/animation/tree/master/wheel](https://github.com/lihaoyuan1/animation/tree/master/wheel)
**查看效果：**[http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html](http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html)
因为图片较多，没翻墙的可能加载有些缓慢，稍等片刻即可；
效果图如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190715185929349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}
2020-02-01 20:54:00.275  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 20:54:00.278  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 20:54:00.290  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 20:54:00.291  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 20:54:00.302  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 20:54:00.306  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 20:54:00.317  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 20:54:00.320  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 20:54:03.716  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/65', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[65]}
2020-02-01 20:54:03.722  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=65, title='css实现摩天轮动画', content='**项目地址：** [https://github.com/lihaoyuan1/animation/tree/master/wheel](https://github.com/lihaoyuan1/animation/tree/master/wheel)
**查看效果：**[http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html](http://htmlpreview.github.io/?https://github.com/lihaoyuan1/animation/blob/master/wheel/%E6%91%A9%E5%A4%A9%E8%BD%AE.html)
因为图片较多，没翻墙的可能加载有些缓慢，稍等片刻即可；
效果图如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190715185929349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}
2020-02-01 20:54:07.507  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 20:54:07.511  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 20:54:07.512  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 20:54:07.516  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 20:54:07.518  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 20:54:07.524  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 20:54:07.525  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 20:54:07.546  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 20:54:10.501  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 20:54:10.507  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 20:57:13.356  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 20:57:13.364  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 20:58:14.795  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 20:58:14.799  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 20:58:37.914  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 20:58:37.918  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:20:28.691  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:20:28.703  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:21:48.577  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:21:48.583  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:22:22.701  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:22:22.706  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:22:24.459  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:22:24.465  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:23:47.413  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:23:47.421  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:24:14.080  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/57', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[57]}
2020-02-01 21:24:14.087  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='#### 题目
给定一个大小为$$N\times M$$的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四个的通道移动，请求出从起点到终点所需的最小步数。限制条件$$N,M \le 100$$
#### 输入
（`'#'`,`'.'`,`'S'`,`'G'`分别表示墙壁、通道、起点和终点）
>$$N=10, M=12$$
>`#S######.#`
>`......#..#`
>`.#.##.##.#`
>`.#........`
>`##.##.####`
>`....#....#`
>`.#######.#`
>`....#.....`
>`.####.###.`
>`....#...G#`

#### 输出
>22

#### 分析
宽度优先搜索按照距开始状态由近即远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。

可以用`d[N][M]`数组把最短距离保存起来，用充分大得常数`INF`来初始化，这样一来，尚未到达的位置就是`INF`。

因为要向四个方向移动，用`dx[4]`和`dy[4]`两个数组来表示四个方向向量，通过循环就可以实现四个方向移动得遍历。

#### 代码

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;
#define MAX_SIZE 100
#define INF 100000000

struct Place{
    int x;
    int y;
};

char maze[MAX_SIZE][MAX_SIZE+1];
int d[MAX_SIZE][MAX_SIZE];

void bfs(Place s, Place g, int n, int m){
	// 四个移动方向，对应右、下、左、上
    int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    // 初始化距离数组，赋一个较大值INF
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            d[i][j] = INF;
    queue<Place> que;
    que.push(s);
    d[s.x][s.y] = 0;
    while(!que.empty()){
        Place p = que.front();
        que.pop();
        // 找到出口
        if(p.x == g.x && p.y == g.y)
            break;
        for(int i=0; i<4; i++){
            int nx = p.x + dx[i], ny = p.y + dy[i];
            if(0 <= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] != '#' && d[nx][ny] == INF){
                Place tmp;
                tmp.x = nx;
                tmp.y = ny;
                que.push(tmp);
                // 当前位置可走通，则距离加一
                d[nx][ny] = d[p.x][p.y] + 1;
            }
        }
    }
    //若输出INF则为死迷宫，反之，输出的是最短距离
    printf("%d\n", d[g.x][g.y]);
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++)
        scanf("%s", maze[i]);
    Place s, g;
    // 查询迷宫开始和结束位置
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(maze[i][j] == 'S'){
                s.x = i;
                s.y = j;
            }
            if(maze[i][j] == 'G'){
                g.x = i;
                g.y = j;
            }
        }
    }
    // bfs遍历
    bfs(s, g, n, m);
    return 0;
}

```
#### 输出
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190730121123906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}
2020-02-01 21:27:44.936  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 21:27:44.937  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 21:27:44.937  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 21:27:44.956  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 21:27:44.952  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 21:27:44.965  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 21:27:44.967  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 21:27:44.972  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 21:30:03.719  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blogsIndex', args=[Page request [number: 0, size 5, sort: updateTime: DESC]]}
2020-02-01 21:30:03.734  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Page 1 of 3 containing com.lhy.blog.po.Blog instances
2020-02-01 21:30:03.894  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/typesIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.typesIndex', args=[]}
2020-02-01 21:30:03.907  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : [Type{id=46, name='PAT（乙级）'}, Type{id=47, name='数据结构'}, Type{id=62, name='前端'}, Type{id=45, name='挑战程序设计竞赛'}, Type{id=44, name='PAT（甲级）'}, Type{id=48, name='填坑笔记'}]
2020-02-01 21:30:04.030  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/tagsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.tagIndex', args=[]}
2020-02-01 21:30:04.032  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/newBlogsIndex', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.newBlogsIndex', args=[]}
2020-02-01 21:30:04.048  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : [Blog{id=68, title='归并排序（分治法）', content='null', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}, Blog{id=67, title='表达式求值', content='null', firstPicture='https://picsum.photos/id/104/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:24:34.909, updateTime=2020-02-01 11:13:56.093}, Blog{id=57, title='迷宫的最短路径（宽度优先搜索）', content='null', firstPicture='https://picsum.photos/id/1026/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 12:26:49.477, updateTime=2020-02-01 11:13:28.719}, Blog{id=64, title='css实现百叶窗照片墙', content='null', firstPicture='https://picsum.photos/id/1037/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:22:54.544, updateTime=2020-02-01 11:13:10.148}, Blog{id=65, title='css实现摩天轮动画', content='null', firstPicture='https://picsum.photos/id/1039/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:24:16.304, updateTime=2020-02-01 11:12:53.79}, Blog{id=61, title='css模拟云朵效果', content='null', firstPicture='https://picsum.photos/id/1036/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:21:23.229, updateTime=2020-01-31 19:52:49.535}, Blog{id=60, title='1035 插入与归并 (25 分)', content='null', firstPicture='https://picsum.photos/id/1032/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:18:56.497, updateTime=2020-01-31 19:52:21.598}, Blog{id=59, title='KMP算法（我的理解）', content='null', firstPicture='https://picsum.photos/id/1035/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-07 18:16:01.463, updateTime=2020-01-31 19:49:19.653}]
2020-02-01 21:30:04.055  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : [Tag{id=34, name='C++'}, Tag{id=39, name='HTML'}, Tag{id=40, name='CSS'}, Tag{id=41, name='JavaScript'}, Tag{id=66, name='CSS3'}, Tag{id=35, name='Java'}, Tag{id=36, name='Python'}, Tag{id=37, name='Spring Boot'}, Tag{id=38, name='Redis'}, Tag{id=42, name='Vue.js'}]
2020-02-01 21:30:31.745  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:30:31.751  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:31:14.447  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:31:14.452  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:32:29.211  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:32:29.216  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:36:47.457  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:36:47.465  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:37:26.220  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:37:26.224  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:38:03.201  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:38:03.208  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:39:19.246  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:39:19.254  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:39:52.689  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:39:52.697  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:40:12.656  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:40:12.663  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:40:18.727  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:40:18.731  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:40:45.054  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:40:45.060  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:41:01.193  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:41:01.197  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:41:58.369  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:41:58.373  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:42:41.904  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:42:41.912  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:45:26.781  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:45:26.790  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:45:27.063  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:45:27.070  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:45:54.981  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:45:54.988  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:51:44.864  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:51:44.878  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:55:28.719  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:55:28.724  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 21:56:46.136  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 21:56:46.141  INFO 15136 --- [http-nio-8080-exec-5] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:00:05.860  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:00:05.864  INFO 15136 --- [http-nio-8080-exec-8] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:03:18.938  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:03:18.947  INFO 15136 --- [http-nio-8080-exec-2] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:04:41.182  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:04:41.185  INFO 15136 --- [http-nio-8080-exec-4] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:06:21.851  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:06:21.855  INFO 15136 --- [http-nio-8080-exec-9] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:07:02.561  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:07:02.565  INFO 15136 --- [http-nio-8080-exec-3] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:07:31.307  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:07:31.311  INFO 15136 --- [http-nio-8080-exec-7] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:14:57.122  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:14:57.127  INFO 15136 --- [http-nio-8080-exec-6] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:16:22.689  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:16:22.696  INFO 15136 --- [http-nio-8080-exec-10] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
2020-02-01 22:16:56.055  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Request : Request{url='http://localhost:8080/blog/68', ip='127.0.0.1', classMethod='com.lhy.blog.web.IndexController.blog', args=[68]}
2020-02-01 22:16:56.060  INFO 15136 --- [http-nio-8080-exec-1] com.lhy.blog.aspect.LogAspect            : Result : Blog{id=68, title='归并排序（分治法）', content='归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略，分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之。归并排序的时间复杂度为$$O(n\log_2n)$$。

下面用一张图了解用分治法实现归并排序的过程：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705102749236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
可以看到，我们将原序列不断进行二分，直至只有一个元素，得到$$n$$个只含有一个元素的序列，再将这$$n$$个需序列不断地两两合并，最终得到一个有序的序列。

这个过程中，合并是实现排序的关键过程，我们是这样实现合并相邻子序列的：

我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将`[4,5,7,8]`和`[1,2,3,6]`两个已经有序的子序列，合并为最终序列`[1,2,3,4,5,6,7,8]`，来看下实现步骤。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705105338282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
这个过程很简单，只要比较两个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可，合并的代码如下：
```cpp
void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}
```
这里用到了辅助数组`temp[]`暂存合并生成的序列，合并完毕后再通过`temp[]`修改，其中`[left, mid]`表示第一个序列，`[mid+1, right]`表示第二个序列。

以下给出递归实现的完整码：
```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int left, int right){
    if(left == right)
        return;
    int mid = (left + right)/2;
    MergeSort(arr, left, mid);				//二分
    MergeSort(arr, mid+1, right);			//二分
    MergeSortArr(arr, left, mid, right);	//归并
    for(int i=0; i<10; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 0, 9);
}
```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190705121050166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIy,size_16,color_FFFFFF,t_70)
归并排序也可以用非递归实现，实现的过程与递归有所不同，不同之处就在于“分”的阶段，从以上递归思路中可以发现，“分”的最终结果是将`n`为数组分成`n`组，即每组只包含一个元素，那么这一过程是不是可以省略呢？答案是可以的，非递归就可以略掉这一过程；

非递归实现的函数如下：

```cpp
void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;//这里的mid不能等于(left+right)/2，具体原因可仔细模拟这一过程
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}
```

以下给出非递归实现的完整代码：

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;

void MergeSortArr(int arr[], int left, int mid, int right){
    int temp[right-left+1];
    int i = left, j = mid + 1, k = 0;
    while(i <= mid && j <= right){
        if(arr[i] < arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= right)
        temp[k++] = arr[j++];
    for(int i=0; i<k; i++)
        arr[left+i] = temp[i];
}

void MergeSort(int arr[], int n){
    int left, mid, right;
    for(int i=2; ; i*=2){   //这里循环结束条件放到了最后，因为当i>n时还要进行一次排序
        for(int j=0; j<n; j+=i){
            left = j;
            mid = (2*j+i-1)/2 < n ? (2*j+i-1)/2:n-1;
            right = (j+i-1) < n ? j+i-1 : n-1;
            MergeSortArr(arr, left, mid, right);
        }
        for(int k=0; k<n; k++){
            printf("%d ", arr[k]);
        }
        printf("\n");
        if(i > n)
            break;
    }
}

int main(){
    int arr[10] = {3, 1, 2, 8, 7, 5, 9, 4, 0, 6};
    MergeSort(arr, 10);
}

```
输出结果如下：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20190717084218838.png)
可以仔细对比两种方法的输出结果，生成的中间序列是有区别的。', firstPicture='https://picsum.photos/id/1043/800/450', flag='原创', views=0, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-08 10:58:37.837, updateTime=2020-02-01 11:14:13.236}
